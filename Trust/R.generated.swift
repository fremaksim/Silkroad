//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 74 images.
  struct image {
    /// Image `BlueCheck`.
    static let blueCheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "BlueCheck")
    /// Image `arrowRight`.
    static let arrowRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowRight")
    /// Image `backup_warning`.
    static let backup_warning = Rswift.ImageResource(bundle: R.hostingBundle, name: "backup_warning")
    /// Image `browser-home`.
    static let browserHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "browser-home")
    /// Image `browser_scan`.
    static let browser_scan = Rswift.ImageResource(bundle: R.hostingBundle, name: "browser_scan")
    /// Image `collectibles`.
    static let collectibles = Rswift.ImageResource(bundle: R.hostingBundle, name: "collectibles")
    /// Image `copy_wallet_icon`.
    static let copy_wallet_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "copy_wallet_icon")
    /// Image `create_wallet`.
    static let create_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "create_wallet")
    /// Image `cube`.
    static let cube = Rswift.ImageResource(bundle: R.hostingBundle, name: "cube")
    /// Image `dapps_icon`.
    static let dapps_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "dapps_icon")
    /// Image `deposit`.
    static let deposit = Rswift.ImageResource(bundle: R.hostingBundle, name: "deposit")
    /// Image `down`.
    static let down = Rswift.ImageResource(bundle: R.hostingBundle, name: "down")
    /// Image `error`.
    static let error = Rswift.ImageResource(bundle: R.hostingBundle, name: "error")
    /// Image `ethereum-60`.
    static let ethereum60 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ethereum-60")
    /// Image `ethereum-61`.
    static let ethereum61 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ethereum-61")
    /// Image `ethereum-820`.
    static let ethereum820 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ethereum-820")
    /// Image `ethereum-99`.
    static let ethereum99 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ethereum-99")
    /// Image `ethereum_1`.
    static let ethereum_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ethereum_1")
    /// Image `ethereum_logo_256`.
    static let ethereum_logo_256 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ethereum_logo_256")
    /// Image `exchangePlaceholder`.
    static let exchangePlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "exchangePlaceholder")
    /// Image `feed`.
    static let feed = Rswift.ImageResource(bundle: R.hostingBundle, name: "feed")
    /// Image `glasses`.
    static let glasses = Rswift.ImageResource(bundle: R.hostingBundle, name: "glasses")
    /// Image `icon_back`.
    static let icon_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_back")
    /// Image `icon_down`.
    static let icon_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_down")
    /// Image `icon_pruse`.
    static let icon_pruse = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_pruse")
    /// Image `icon_search_S`.
    static let icon_search_S = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search_S")
    /// Image `icon_search`.
    static let icon_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search")
    /// Image `icon_success`.
    static let icon_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_success")
    /// Image `icon_tip`.
    static let icon_tip = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tip")
    /// Image `import_options`.
    static let import_options = Rswift.ImageResource(bundle: R.hostingBundle, name: "import_options")
    /// Image `keystore_backup_icon`.
    static let keystore_backup_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "keystore_backup_icon")
    /// Image `launch_screen_logo`.
    static let launch_screen_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch_screen_logo")
    /// Image `mascot_happy`.
    static let mascot_happy = Rswift.ImageResource(bundle: R.hostingBundle, name: "mascot_happy")
    /// Image `mnemonic_backup_icon`.
    static let mnemonic_backup_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mnemonic_backup_icon")
    /// Image `no_transactions_mascot`.
    static let no_transactions_mascot = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_transactions_mascot")
    /// Image `onboarding_erc20`.
    static let onboarding_erc20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_erc20")
    /// Image `onboarding_lock`.
    static let onboarding_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_lock")
    /// Image `onboarding_open_source`.
    static let onboarding_open_source = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_open_source")
    /// Image `onboarding_rocket`.
    static let onboarding_rocket = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding_rocket")
    /// Image `private_key_icon`.
    static let private_key_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "private_key_icon")
    /// Image `qr_code_icon`.
    static let qr_code_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "qr_code_icon")
    /// Image `settings_bug`.
    static let settings_bug = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_bug")
    /// Image `settings_colorful_about`.
    static let settings_colorful_about = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_about")
    /// Image `settings_colorful_analitics`.
    static let settings_colorful_analitics = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_analitics")
    /// Image `settings_colorful_auto`.
    static let settings_colorful_auto = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_auto")
    /// Image `settings_colorful_currency`.
    static let settings_colorful_currency = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_currency")
    /// Image `settings_colorful_dappbrowser`.
    static let settings_colorful_dappbrowser = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_dappbrowser")
    /// Image `settings_colorful_developer`.
    static let settings_colorful_developer = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_developer")
    /// Image `settings_colorful_discord`.
    static let settings_colorful_discord = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_discord")
    /// Image `settings_colorful_facebook`.
    static let settings_colorful_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_facebook")
    /// Image `settings_colorful_faq`.
    static let settings_colorful_faq = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_faq")
    /// Image `settings_colorful_help_center`.
    static let settings_colorful_help_center = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_help_center")
    /// Image `settings_colorful_networks`.
    static let settings_colorful_networks = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_networks")
    /// Image `settings_colorful_notifications`.
    static let settings_colorful_notifications = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_notifications")
    /// Image `settings_colorful_privacy`.
    static let settings_colorful_privacy = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_privacy")
    /// Image `settings_colorful_security`.
    static let settings_colorful_security = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_security")
    /// Image `settings_colorful_share`.
    static let settings_colorful_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_share")
    /// Image `settings_colorful_telegram`.
    static let settings_colorful_telegram = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_telegram")
    /// Image `settings_colorful_twitter`.
    static let settings_colorful_twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_twitter")
    /// Image `settings_colorful_update`.
    static let settings_colorful_update = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_update")
    /// Image `settings_colorful_wallets`.
    static let settings_colorful_wallets = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_colorful_wallets")
    /// Image `settings_export`.
    static let settings_export = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_export")
    /// Image `settings_icon`.
    static let settings_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_icon")
    /// Image `toolbar-back`.
    static let toolbarBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-back")
    /// Image `toolbar-menu`.
    static let toolbarMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "toolbar-menu")
    /// Image `transaction-slider`.
    static let transactionSlider = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction-slider")
    /// Image `transaction_error`.
    static let transaction_error = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_error")
    /// Image `transaction_pending`.
    static let transaction_pending = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_pending")
    /// Image `transaction_received`.
    static let transaction_received = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_received")
    /// Image `transaction_sent`.
    static let transaction_sent = Rswift.ImageResource(bundle: R.hostingBundle, name: "transaction_sent")
    /// Image `trust_icon`.
    static let trust_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "trust_icon")
    /// Image `verify_passphrase`.
    static let verify_passphrase = Rswift.ImageResource(bundle: R.hostingBundle, name: "verify_passphrase")
    /// Image `wallet_tab_icon`.
    static let wallet_tab_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "wallet_tab_icon")
    /// Image `write_passphrase`.
    static let write_passphrase = Rswift.ImageResource(bundle: R.hostingBundle, name: "write_passphrase")
    
    /// `UIImage(named: "BlueCheck", bundle: ..., traitCollection: ...)`
    static func blueCheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blueCheck, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "arrowRight", bundle: ..., traitCollection: ...)`
    static func arrowRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backup_warning", bundle: ..., traitCollection: ...)`
    static func backup_warning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backup_warning, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "browser-home", bundle: ..., traitCollection: ...)`
    static func browserHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browserHome, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "browser_scan", bundle: ..., traitCollection: ...)`
    static func browser_scan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.browser_scan, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "collectibles", bundle: ..., traitCollection: ...)`
    static func collectibles(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.collectibles, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "copy_wallet_icon", bundle: ..., traitCollection: ...)`
    static func copy_wallet_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.copy_wallet_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "create_wallet", bundle: ..., traitCollection: ...)`
    static func create_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.create_wallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cube", bundle: ..., traitCollection: ...)`
    static func cube(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cube, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dapps_icon", bundle: ..., traitCollection: ...)`
    static func dapps_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dapps_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "deposit", bundle: ..., traitCollection: ...)`
    static func deposit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deposit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "down", bundle: ..., traitCollection: ...)`
    static func down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "error", bundle: ..., traitCollection: ...)`
    static func error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.error, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ethereum-60", bundle: ..., traitCollection: ...)`
    static func ethereum60(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ethereum60, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ethereum-61", bundle: ..., traitCollection: ...)`
    static func ethereum61(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ethereum61, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ethereum-820", bundle: ..., traitCollection: ...)`
    static func ethereum820(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ethereum820, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ethereum-99", bundle: ..., traitCollection: ...)`
    static func ethereum99(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ethereum99, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ethereum_1", bundle: ..., traitCollection: ...)`
    static func ethereum_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ethereum_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ethereum_logo_256", bundle: ..., traitCollection: ...)`
    static func ethereum_logo_256(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ethereum_logo_256, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "exchangePlaceholder", bundle: ..., traitCollection: ...)`
    static func exchangePlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exchangePlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "feed", bundle: ..., traitCollection: ...)`
    static func feed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "glasses", bundle: ..., traitCollection: ...)`
    static func glasses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.glasses, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_back", bundle: ..., traitCollection: ...)`
    static func icon_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_down", bundle: ..., traitCollection: ...)`
    static func icon_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_pruse", bundle: ..., traitCollection: ...)`
    static func icon_pruse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_pruse, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_search", bundle: ..., traitCollection: ...)`
    static func icon_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_search_S", bundle: ..., traitCollection: ...)`
    static func icon_search_S(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search_S, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_success", bundle: ..., traitCollection: ...)`
    static func icon_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tip", bundle: ..., traitCollection: ...)`
    static func icon_tip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tip, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "import_options", bundle: ..., traitCollection: ...)`
    static func import_options(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.import_options, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "keystore_backup_icon", bundle: ..., traitCollection: ...)`
    static func keystore_backup_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.keystore_backup_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "launch_screen_logo", bundle: ..., traitCollection: ...)`
    static func launch_screen_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch_screen_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mascot_happy", bundle: ..., traitCollection: ...)`
    static func mascot_happy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mascot_happy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mnemonic_backup_icon", bundle: ..., traitCollection: ...)`
    static func mnemonic_backup_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mnemonic_backup_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "no_transactions_mascot", bundle: ..., traitCollection: ...)`
    static func no_transactions_mascot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_transactions_mascot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboarding_erc20", bundle: ..., traitCollection: ...)`
    static func onboarding_erc20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_erc20, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboarding_lock", bundle: ..., traitCollection: ...)`
    static func onboarding_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_lock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboarding_open_source", bundle: ..., traitCollection: ...)`
    static func onboarding_open_source(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_open_source, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "onboarding_rocket", bundle: ..., traitCollection: ...)`
    static func onboarding_rocket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding_rocket, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "private_key_icon", bundle: ..., traitCollection: ...)`
    static func private_key_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.private_key_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "qr_code_icon", bundle: ..., traitCollection: ...)`
    static func qr_code_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qr_code_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_bug", bundle: ..., traitCollection: ...)`
    static func settings_bug(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_bug, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_about", bundle: ..., traitCollection: ...)`
    static func settings_colorful_about(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_about, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_analitics", bundle: ..., traitCollection: ...)`
    static func settings_colorful_analitics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_analitics, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_auto", bundle: ..., traitCollection: ...)`
    static func settings_colorful_auto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_auto, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_currency", bundle: ..., traitCollection: ...)`
    static func settings_colorful_currency(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_currency, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_dappbrowser", bundle: ..., traitCollection: ...)`
    static func settings_colorful_dappbrowser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_dappbrowser, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_developer", bundle: ..., traitCollection: ...)`
    static func settings_colorful_developer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_developer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_discord", bundle: ..., traitCollection: ...)`
    static func settings_colorful_discord(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_discord, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_facebook", bundle: ..., traitCollection: ...)`
    static func settings_colorful_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_faq", bundle: ..., traitCollection: ...)`
    static func settings_colorful_faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_faq, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_help_center", bundle: ..., traitCollection: ...)`
    static func settings_colorful_help_center(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_help_center, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_networks", bundle: ..., traitCollection: ...)`
    static func settings_colorful_networks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_networks, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_notifications", bundle: ..., traitCollection: ...)`
    static func settings_colorful_notifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_notifications, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_privacy", bundle: ..., traitCollection: ...)`
    static func settings_colorful_privacy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_privacy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_security", bundle: ..., traitCollection: ...)`
    static func settings_colorful_security(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_security, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_share", bundle: ..., traitCollection: ...)`
    static func settings_colorful_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_telegram", bundle: ..., traitCollection: ...)`
    static func settings_colorful_telegram(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_telegram, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_twitter", bundle: ..., traitCollection: ...)`
    static func settings_colorful_twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_twitter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_update", bundle: ..., traitCollection: ...)`
    static func settings_colorful_update(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_update, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_colorful_wallets", bundle: ..., traitCollection: ...)`
    static func settings_colorful_wallets(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_colorful_wallets, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_export", bundle: ..., traitCollection: ...)`
    static func settings_export(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_export, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings_icon", bundle: ..., traitCollection: ...)`
    static func settings_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-back", bundle: ..., traitCollection: ...)`
    static func toolbarBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "toolbar-menu", bundle: ..., traitCollection: ...)`
    static func toolbarMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolbarMenu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transaction-slider", bundle: ..., traitCollection: ...)`
    static func transactionSlider(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transactionSlider, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transaction_error", bundle: ..., traitCollection: ...)`
    static func transaction_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_error, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transaction_pending", bundle: ..., traitCollection: ...)`
    static func transaction_pending(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_pending, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transaction_received", bundle: ..., traitCollection: ...)`
    static func transaction_received(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_received, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transaction_sent", bundle: ..., traitCollection: ...)`
    static func transaction_sent(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transaction_sent, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "trust_icon", bundle: ..., traitCollection: ...)`
    static func trust_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.trust_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "verify_passphrase", bundle: ..., traitCollection: ...)`
    static func verify_passphrase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.verify_passphrase, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wallet_tab_icon", bundle: ..., traitCollection: ...)`
    static func wallet_tab_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wallet_tab_icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "write_passphrase", bundle: ..., traitCollection: ...)`
    static func write_passphrase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.write_passphrase, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `BookmarkViewCell`.
    static let bookmarkViewCell = _R.nib._BookmarkViewCell()
    /// Nib `CoinViewCell`.
    static let coinViewCell = _R.nib._CoinViewCell()
    /// Nib `EditTokenTableViewCell`.
    static let editTokenTableViewCell = _R.nib._EditTokenTableViewCell()
    /// Nib `NonFungibleCollectionViewCell`.
    static let nonFungibleCollectionViewCell = _R.nib._NonFungibleCollectionViewCell()
    /// Nib `NonFungibleTokenViewCell`.
    static let nonFungibleTokenViewCell = _R.nib._NonFungibleTokenViewCell()
    /// Nib `WalletViewCell`.
    static let walletViewCell = _R.nib._WalletViewCell()
    /// Nib `WordCollectionViewCell`.
    static let wordCollectionViewCell = _R.nib._WordCollectionViewCell()
    
    /// `UINib(name: "BookmarkViewCell", in: bundle)`
    static func bookmarkViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bookmarkViewCell)
    }
    
    /// `UINib(name: "CoinViewCell", in: bundle)`
    static func coinViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.coinViewCell)
    }
    
    /// `UINib(name: "EditTokenTableViewCell", in: bundle)`
    static func editTokenTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editTokenTableViewCell)
    }
    
    /// `UINib(name: "NonFungibleCollectionViewCell", in: bundle)`
    static func nonFungibleCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.nonFungibleCollectionViewCell)
    }
    
    /// `UINib(name: "NonFungibleTokenViewCell", in: bundle)`
    static func nonFungibleTokenViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.nonFungibleTokenViewCell)
    }
    
    /// `UINib(name: "WalletViewCell", in: bundle)`
    static func walletViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.walletViewCell)
    }
    
    /// `UINib(name: "WordCollectionViewCell", in: bundle)`
    static func wordCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wordCollectionViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `BookmarkViewCell`.
    static let bookmarkViewCell: Rswift.ReuseIdentifier<BookmarkViewCell> = Rswift.ReuseIdentifier(identifier: "BookmarkViewCell")
    /// Reuse identifier `NonFungibleCollectionViewCell`.
    static let nonFungibleCollectionViewCell: Rswift.ReuseIdentifier<NonFungibleCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "NonFungibleCollectionViewCell")
    /// Reuse identifier `NonFungibleTokenViewCell`.
    static let nonFungibleTokenViewCell: Rswift.ReuseIdentifier<NonFungibleTokenViewCell> = Rswift.ReuseIdentifier(identifier: "NonFungibleTokenViewCell")
    /// Reuse identifier `word`.
    static let word: Rswift.ReuseIdentifier<WordCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "word")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 296 localization keys.
    struct localizable {
      /// en translation: %@ Address
      /// 
      /// Locales: en, zh-Hans
      static let importWalletWatchPlaceholder = Rswift.StringResource(key: "import.wallet.watch.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: About
      /// 
      /// Locales: en, zh-Hans
      static let settingsAboutTitle = Rswift.StringResource(key: "settings.about.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Add Bookmark
      /// 
      /// Locales: en, zh-Hans
      static let browserAddbookmarkButtonTitle = Rswift.StringResource(key: "browser.addbookmark.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Add Custom Token
      /// 
      /// Locales: en, zh-Hans
      static let tokensNewtokenNavigationTitle = Rswift.StringResource(key: "tokens.newtoken.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Address
      /// 
      /// Locales: en, zh-Hans
      static let address = Rswift.StringResource(key: "Address", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Address copied
      /// 
      /// Locales: en, zh-Hans
      static let requestAddressCopiedTitle = Rswift.StringResource(key: "request.addressCopied.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Addresses
      /// 
      /// Locales: en, zh-Hans
      static let addresses = Rswift.StringResource(key: "Addresses", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Advanced
      /// 
      /// Locales: en, zh-Hans
      static let advanced = Rswift.StringResource(key: "Advanced", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: All
      /// 
      /// Locales: en, zh-Hans
      static let settingsCurrencyAllLabelTitle = Rswift.StringResource(key: "settings.currency.all.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Allow Push Notifications
      /// 
      /// Locales: en, zh-Hans
      static let settingsAllowPushNotificationsButtonTitle = Rswift.StringResource(key: "settings.allowPushNotifications.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, zh-Hans
      static let confirmPaymentAmountLabelTitle = Rswift.StringResource(key: "confirmPayment.amount.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Amount
      /// 
      /// Locales: en, zh-Hans
      static let sendAmountTextFieldPlaceholder = Rswift.StringResource(key: "send.amount.textField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Any 'jailbreak' app can access Trust's keychain data and steal your wallet! Wipe this wallet immediately and restore on a secure device.
      /// 
      /// Locales: en, zh-Hans
      static let appDeviceJailbreakDescription = Rswift.StringResource(key: "app.device.jailbreak.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Anyone with your Private Key will have FULL access to your wallet!
      /// 
      /// Locales: en, zh-Hans
      static let exportWarningTwoPrivateKey = Rswift.StringResource(key: "export.warningTwo.private.key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Approve
      /// 
      /// Locales: en, zh-Hans
      static let approve = Rswift.StringResource(key: "Approve", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Are you sure you want to skip this step?
      /// 
      /// Locales: en, zh-Hans
      static let verifyPassphraseSkipConfirmTitle = Rswift.StringResource(key: "verifyPassphrase.skip.confirm.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Are you sure you would like to delete this bookmark?
      /// 
      /// Locales: en, zh-Hans
      static let browserBookmarksConfirmDeleteTitle = Rswift.StringResource(key: "browser.bookmarks.confirm.delete.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Are you sure you would like to delete this wallet?
      /// 
      /// Locales: en, zh-Hans
      static let accountsConfirmDeleteTitle = Rswift.StringResource(key: "accounts.confirm.delete.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Are you sure you would like to delete?
      /// 
      /// Locales: en, zh-Hans
      static let areYouSureYouWouldLikeToDelete = Rswift.StringResource(key: "Are you sure you would like to delete?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Auto-Lock
      /// 
      /// Locales: en, zh-Hans
      static let settingsAutoLockButtonTitle = Rswift.StringResource(key: "settings.autoLock.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Back
      /// 
      /// Locales: en, zh-Hans
      static let back = Rswift.StringResource(key: "Back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Backup Keystore
      /// 
      /// Locales: en, zh-Hans
      static let walletsBackupAlertSheetTitle = Rswift.StringResource(key: "wallets.backup.alertSheet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Backup Password
      /// 
      /// Locales: en, zh-Hans
      static let enterPasswordNavigationTitle = Rswift.StringResource(key: "enterPassword.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Backup Phrase
      /// 
      /// Locales: en, zh-Hans
      static let backupPhrase = Rswift.StringResource(key: "BackupPhrase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Backup Wallet
      /// 
      /// Locales: en, zh-Hans
      static let exportBackupButtonTitle = Rswift.StringResource(key: "export.backup.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Block #
      /// 
      /// Locales: en, zh-Hans
      static let transactionBlockNumberLabelTitle = Rswift.StringResource(key: "transaction.blockNumber.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bookmarks
      /// 
      /// Locales: en, zh-Hans
      static let bookmarks = Rswift.StringResource(key: "Bookmarks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bookmarks
      /// 
      /// Locales: en, zh-Hans
      static let browserBookmarksButtonTitle = Rswift.StringResource(key: "browser.bookmarks.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Bookmarks
      /// 
      /// Locales: en, zh-Hans
      static let browserBookmarksTitle = Rswift.StringResource(key: "browser.bookmarks.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Browser
      /// 
      /// Locales: en, zh-Hans
      static let browserTabbarItemTitle = Rswift.StringResource(key: "browser.tabbar.item.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Buy
      /// 
      /// Locales: en, zh-Hans
      static let transactionsDepositButtonTitle = Rswift.StringResource(key: "transactions.deposit.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: CREATE WALLET
      /// 
      /// Locales: en, zh-Hans
      static let welcomeCreateWalletButtonTitle = Rswift.StringResource(key: "welcome.createWallet.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Chain ID
      /// 
      /// Locales: en, zh-Hans
      static let chainID = Rswift.StringResource(key: "ChainID", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Check out Trust - the wallet that lets me securely store my Ethereum and ERC20 tokens.
      /// 
      /// Locales: en, zh-Hans
      static let welldoneViewmodelSharingText2 = Rswift.StringResource(key: "welldone.viewmodel.sharing.text2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Check the update
      /// 
      /// Locales: en, zh-Hans
      static let settingsUpdateTitle = Rswift.StringResource(key: "settings.update.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Clear Browser Cache
      /// 
      /// Locales: en, zh-Hans
      static let settingsBrowserClearCacheTitle = Rswift.StringResource(key: "settings.browser.clearCache.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Clear Browsing Data?
      /// 
      /// Locales: en, zh-Hans
      static let settingsBrowserClearCacheAlertTitle = Rswift.StringResource(key: "settings.browser.clearCache.alert.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Code is open sourced (GPL-3.0 license) and fully audited.
      /// 
      /// Locales: en, zh-Hans
      static let welcomeFullyTransparentLabelDescription = Rswift.StringResource(key: "welcome.fullyTransparent.label.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Community
      /// 
      /// Locales: en, zh-Hans
      static let settingsCommunityLabelTitle = Rswift.StringResource(key: "settings.community.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static let confirmPaymentConfirmButtonTitle = Rswift.StringResource(key: "confirmPayment.confirm.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirm Password
      /// 
      /// Locales: en, zh-Hans
      static let enterPasswordConfirmPasswordTextFieldPlaceholder = Rswift.StringResource(key: "enterPassword.confirmPassword.textField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Confirmation
      /// 
      /// Locales: en, zh-Hans
      static let transactionConfirmationLabelTitle = Rswift.StringResource(key: "transaction.confirmation.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Contract Address
      /// 
      /// Locales: en, zh-Hans
      static let contractAddress = Rswift.StringResource(key: "ContractAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy
      /// 
      /// Locales: en, zh-Hans
      static let copy = Rswift.StringResource(key: "Copy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy Address
      /// 
      /// Locales: en, zh-Hans
      static let copyAddress = Rswift.StringResource(key: "CopyAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy Transaction ID
      /// 
      /// Locales: en, zh-Hans
      static let sendActionCopyTransactionTitle = Rswift.StringResource(key: "send.action.copy.transaction.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy wallet address
      /// 
      /// Locales: en, zh-Hans
      static let requestCopyWalletButtonTitle = Rswift.StringResource(key: "request.copyWallet.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Crash Reports
      /// 
      /// Locales: en, zh-Hans
      static let crashReports = Rswift.StringResource(key: "CrashReports", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Creating Wallet
      /// 
      /// Locales: en, zh-Hans
      static let creatingWallet = Rswift.StringResource(key: "CreatingWallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Currency
      /// 
      /// Locales: en, zh-Hans
      static let settingsCurrencyButtonTitle = Rswift.StringResource(key: "settings.currency.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Custom
      /// 
      /// Locales: en, zh-Hans
      static let settingsNetworkCustomLabelTitle = Rswift.StringResource(key: "settings.network.custom.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Custom Network
      /// 
      /// Locales: en, zh-Hans
      static let settingsCustomNetworkNavigationTitle = Rswift.StringResource(key: "settings.customNetwork.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: DApp
      /// 
      /// Locales: en, zh-Hans
      static let confirmPaymentDappLabelTitle = Rswift.StringResource(key: "confirmPayment.dapp.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: DApp Browser
      /// 
      /// Locales: en, zh-Hans
      static let settingsBrowserTitle = Rswift.StringResource(key: "settings.browser.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: DEVICE SECURITY COMPROMISED
      /// 
      /// Locales: en, zh-Hans
      static let appDeviceJailbreakTitle = Rswift.StringResource(key: "app.device.jailbreak.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Daily Usage
      /// 
      /// Locales: en, zh-Hans
      static let dailyUsage = Rswift.StringResource(key: "DailyUsage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Data
      /// 
      /// Locales: en, zh-Hans
      static let confirmPaymentDataLabelTitle = Rswift.StringResource(key: "confirmPayment.data.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Data (Optional). %@
      /// 
      /// Locales: en, zh-Hans
      static let configureTransactionDataFieldLabelTitle = Rswift.StringResource(key: "configureTransaction.dataField.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Decimals
      /// 
      /// Locales: en, zh-Hans
      static let decimals = Rswift.StringResource(key: "Decimals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Deferred Deep Linking
      /// 
      /// Locales: en, zh-Hans
      static let deferredDeepLinking = Rswift.StringResource(key: "DeferredDeepLinking", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Delete
      /// 
      /// Locales: en, zh-Hans
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Deleting
      /// 
      /// Locales: en, zh-Hans
      static let deleting = Rswift.StringResource(key: "Deleting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Deploy smart contract
      /// 
      /// Locales: en, zh-Hans
      static let transactionDeployContractLabelTitle = Rswift.StringResource(key: "transaction.deployContract.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Developer
      /// 
      /// Locales: en, zh-Hans
      static let developer = Rswift.StringResource(key: "Developer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Disable
      /// 
      /// Locales: en, zh-Hans
      static let disable = Rswift.StringResource(key: "Disable", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Do it later
      /// 
      /// Locales: en, zh-Hans
      static let exportSkipButtonTitle = Rswift.StringResource(key: "export.skip.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Don't show again
      /// 
      /// Locales: en, zh-Hans
      static let settingsNetworkTestWarnningDontShowAgain = Rswift.StringResource(key: "settings.network.test.warnning.dont.show.again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Donate
      /// 
      /// Locales: en, zh-Hans
      static let settingsDonateButtonTitle = Rswift.StringResource(key: "settings.donate.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Done
      /// 
      /// Locales: en, zh-Hans
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: DuckDuckGo
      /// 
      /// Locales: en, zh-Hans
      static let duckDuckGo = Rswift.StringResource(key: "DuckDuckGo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: ERC20 Compatible
      /// 
      /// Locales: en, zh-Hans
      static let welcomeErc20LabelTitle = Rswift.StringResource(key: "welcome.erc20.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Edit
      /// 
      /// Locales: en, zh-Hans
      static let edit = Rswift.StringResource(key: "Edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Edit Custom Token
      /// 
      /// Locales: en, zh-Hans
      static let tokensTokenEditNavigationTitle = Rswift.StringResource(key: "tokens.token.edit.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Email Us
      /// 
      /// Locales: en, zh-Hans
      static let settingsEmailUsButtonTitle = Rswift.StringResource(key: "settings.emailUs.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Email Us (Read FAQ first)
      /// 
      /// Locales: en, zh-Hans
      static let settingsEmailUsReadFAQButtonTitle = Rswift.StringResource(key: "settings.emailUsReadFAQ.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Empty
      /// 
      /// Locales: en, zh-Hans
      static let empty = Rswift.StringResource(key: "Empty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Empty ClipBoard
      /// 
      /// Locales: en, zh-Hans
      static let sendErrorEmptyClipBoard = Rswift.StringResource(key: "send.error.emptyClipBoard", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Enable Test Networks
      /// 
      /// Locales: en, zh-Hans
      static let enableTestNetworks = Rswift.StringResource(key: "EnableTestNetworks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Endpoint
      /// 
      /// Locales: en, zh-Hans
      static let endpoint = Rswift.StringResource(key: "Endpoint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Enter a new passcode
      /// 
      /// Locales: en, zh-Hans
      static let lockCreatePasscodeViewModelInitial = Rswift.StringResource(key: "lock.create.passcode.view.model.initial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Enter current password to export your wallet
      /// 
      /// Locales: en, zh-Hans
      static let exportEnterCurrentPasswordTextFieldTitle = Rswift.StringResource(key: "export.enterCurrentPassword.textField.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Enter password to encrypt your wallet
      /// 
      /// Locales: en, zh-Hans
      static let exportEnterPasswordTextFieldTitle = Rswift.StringResource(key: "export.enterPassword.textField.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Enter your passcode.
      /// 
      /// Locales: en, zh-Hans
      static let lockEnterPasscodeViewModelInitial = Rswift.StringResource(key: "lock.enter.passcode.view.model.initial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Error
      /// 
      /// Locales: en, zh-Hans
      static let transactionCellErrorTitle = Rswift.StringResource(key: "transaction.cell.error.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Ethereum Address
      /// 
      /// Locales: en, zh-Hans
      static let ethereumAddress = Rswift.StringResource(key: "EthereumAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Exchange
      /// 
      /// Locales: en, zh-Hans
      static let collectibles = Rswift.StringResource(key: "Collectibles", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Explore on OpenSea.io
      /// 
      /// Locales: en, zh-Hans
      static let collectiblesDiscoverLabelTitle = Rswift.StringResource(key: "collectibles.discover.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Export Private Key
      /// 
      /// Locales: en, zh-Hans
      static let exportPrivateKeyNavigationTitle = Rswift.StringResource(key: "export.privateKey.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Export Private Key
      /// 
      /// Locales: en, zh-Hans
      static let walletsExportAlertSheetTitle = Rswift.StringResource(key: "wallets.export.alertSheet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Export at your own risk!
      /// 
      /// Locales: en, zh-Hans
      static let exportWarningPrivateKey = Rswift.StringResource(key: "export.warning.private.key", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: FAQ
      /// 
      /// Locales: en, zh-Hans
      static let settingsFaqButtonTitle = Rswift.StringResource(key: "settings.faq.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Failed
      /// 
      /// Locales: en, zh-Hans
      static let transactionCellFailedTitle = Rswift.StringResource(key: "transaction.cell.failed.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Failed to send email. Make sure you have Mail app installed.
      /// 
      /// Locales: en, zh-Hans
      static let settingsErrorFailedToSendEmail = Rswift.StringResource(key: "settings.error.failedToSendEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: From
      /// 
      /// Locales: en, zh-Hans
      static let confirmPaymentFromLabelTitle = Rswift.StringResource(key: "confirmPayment.from.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: From
      /// 
      /// Locales: en, zh-Hans
      static let transactionFromLabelTitle = Rswift.StringResource(key: "transaction.from.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Fully transparent
      /// 
      /// Locales: en, zh-Hans
      static let welcomeFullyTransparentLabelTitle = Rswift.StringResource(key: "welcome.fullyTransparent.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Gas Fee is too high. Max available: %1$@ %2$@
      /// 
      /// Locales: en, zh-Hans
      static let configureTransactionErrorGasFeeHigh = Rswift.StringResource(key: "configureTransaction.error.gasFeeHigh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Gas Fee too high. Max available: %@
      /// 
      /// Locales: en, zh-Hans
      static let configureTransactionErrorGasFeeTooHigh = Rswift.StringResource(key: "configureTransaction.error.gasFeeTooHigh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Gas Limit
      /// 
      /// Locales: en, zh-Hans
      static let configureTransactionGasLimitLabelTitle = Rswift.StringResource(key: "configureTransaction.gasLimit.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Gas Limit
      /// 
      /// Locales: en, zh-Hans
      static let confirmPaymentGasLimitLabelTitle = Rswift.StringResource(key: "confirmPayment.gasLimit.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Gas Limit too high. Max available: %li
      /// 
      /// Locales: en, zh-Hans
      static let configureTransactionErrorGasLimitTooHigh = Rswift.StringResource(key: "configureTransaction.error.gasLimitTooHigh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Gas Price
      /// 
      /// Locales: en, zh-Hans
      static let configureTransactionGasPriceLabelTitle = Rswift.StringResource(key: "configureTransaction.gasPrice.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Gas Price
      /// 
      /// Locales: en, zh-Hans
      static let confirmPaymentGasPriceLabelTitle = Rswift.StringResource(key: "confirmPayment.gasPrice.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Gas Price (Gwei)
      /// 
      /// Locales: en, zh-Hans
      static let configureTransactionGasPriceGweiLabelTitle = Rswift.StringResource(key: "configureTransaction.gasPriceGwei.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Generating QR Code
      /// 
      /// Locales: en, zh-Hans
      static let exportQrCodeLoadingLabel = Rswift.StringResource(key: "export.qrCode.loading.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Google
      /// 
      /// Locales: en, zh-Hans
      static let google = Rswift.StringResource(key: "Google", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: HD Wallet
      /// 
      /// Locales: en, zh-Hans
      static let walletSectionHdWalletTitle = Rswift.StringResource(key: "wallet.section.hdWallet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Help Center
      /// 
      /// Locales: en, zh-Hans
      static let settingsHelpCenterTitle = Rswift.StringResource(key: "settings.helpCenter.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Help Trust developers to improve its product and service by automatically sending crash reports.
      /// 
      /// Locales: en, zh-Hans
      static let settingsAnaliticsCrashlyticsDescription = Rswift.StringResource(key: "settings.analitics.crashlytics.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Help Trust improve user engagement by sharing deep links redirects.
      /// 
      /// Locales: en, zh-Hans
      static let settingsAnaliticsBranchDescription = Rswift.StringResource(key: "settings.analitics.branch.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Help Trust improve user experience by sharing app daily diagnostic.
      /// 
      /// Locales: en, zh-Hans
      static let settingsAnaliticsAnswerDescription = Rswift.StringResource(key: "settings.analitics.answer.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Help us grow by sharing this app with your friends!
      /// 
      /// Locales: en, zh-Hans
      static let welldoneDescriptionLabelText = Rswift.StringResource(key: "welldone.description.label.text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Here is the app I use to store my ETH and ERC20 tokens.
      /// 
      /// Locales: en, zh-Hans
      static let welldoneViewmodelSharingText1 = Rswift.StringResource(key: "welldone.viewmodel.sharing.text1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: History
      /// 
      /// Locales: en, zh-Hans
      static let history = Rswift.StringResource(key: "History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Home
      /// 
      /// Locales: en, zh-Hans
      static let browserHomeButtonTitle = Rswift.StringResource(key: "browser.home.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: How would you like to buy?
      /// 
      /// Locales: en, zh-Hans
      static let depositBuyLabelTitle = Rswift.StringResource(key: "deposit.buy.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: I secure my Ethereum and ERC20 tokens in the Trust wallet.
      /// 
      /// Locales: en, zh-Hans
      static let welldoneViewmodelSharingText4 = Rswift.StringResource(key: "welldone.viewmodel.sharing.text4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: I securely store Ethereum and ERC20 tokens in the Trust wallet
      /// 
      /// Locales: en, zh-Hans
      static let welldoneViewmodelSharingText3 = Rswift.StringResource(key: "welldone.viewmodel.sharing.text3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: IMPORT WALLET
      /// 
      /// Locales: en, zh-Hans
      static let welcomeImportWalletButtonTitle = Rswift.StringResource(key: "welcome.importWallet.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: If away for 1 hour
      /// 
      /// Locales: en, zh-Hans
      static let walletsNavigationTitleAutolockOneHour = Rswift.StringResource(key: "wallets.navigation.title.autolock.one.hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: If away for 1 minute
      /// 
      /// Locales: en, zh-Hans
      static let walletsNavigationTitleAutolockOneMinute = Rswift.StringResource(key: "wallets.navigation.title.autolock.one.minute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: If away for 5 hours
      /// 
      /// Locales: en, zh-Hans
      static let walletsNavigationTitleAutolockFiveHour = Rswift.StringResource(key: "wallets.navigation.title.autolock.five.hour", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: If away for 5 minutes
      /// 
      /// Locales: en, zh-Hans
      static let walletsNavigationTitleAutolockFiveMinutes = Rswift.StringResource(key: "wallets.navigation.title.autolock.five.minutes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Immediate
      /// 
      /// Locales: en, zh-Hans
      static let walletsNavigationTitleAutolockImmediate = Rswift.StringResource(key: "wallets.navigation.title.autolock.immediate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Import
      /// 
      /// Locales: en, zh-Hans
      static let importWalletImportButtonTitle = Rswift.StringResource(key: "importWallet.import.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Import Main Wallet
      /// 
      /// Locales: en, zh-Hans
      static let importMainWallet = Rswift.StringResource(key: "ImportMainWallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Import Wallet
      /// 
      /// Locales: en, zh-Hans
      static let importNavigationTitle = Rswift.StringResource(key: "import.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Import Wallet Options
      /// 
      /// Locales: en, zh-Hans
      static let importWalletImportAlertSheetTitle = Rswift.StringResource(key: "importWallet.import.alertSheet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Imported Wallets
      /// 
      /// Locales: en, zh-Hans
      static let importedWallets = Rswift.StringResource(key: "ImportedWallets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Importing wallet...
      /// 
      /// Locales: en, zh-Hans
      static let importWalletImportingIndicatorLabelTitle = Rswift.StringResource(key: "importWallet.importingIndicator.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Incoming Transaction
      /// 
      /// Locales: en, zh-Hans
      static let incomingTransaction = Rswift.StringResource(key: "IncomingTransaction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Incorrect passcode. You have %li attempts left.
      /// 
      /// Locales: en, zh-Hans
      static let lockEnterPasscodeViewModelIncorrectPasscode = Rswift.StringResource(key: "lock.enter.passcode.view.model.incorrect.passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Infura
      /// 
      /// Locales: en, zh-Hans
      static let infura = Rswift.StringResource(key: "Infura", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Insufficient %@ balance
      /// 
      /// Locales: en, zh-Hans
      static let sendErrorInsufficientEther = Rswift.StringResource(key: "send.error.insufficientEther", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Insufficient %@ to cover gas fee
      /// 
      /// Locales: en, zh-Hans
      static let sendErrorInsufficientGas = Rswift.StringResource(key: "send.error.insufficientGas", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Insufficient %@ token balance
      /// 
      /// Locales: en, zh-Hans
      static let sendErrorInsufficientToken = Rswift.StringResource(key: "send.error.insufficientToken", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Invalid Address
      /// 
      /// Locales: en, zh-Hans
      static let sendErrorInvalidAddress = Rswift.StringResource(key: "send.error.invalidAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Invalid Amount
      /// 
      /// Locales: en, zh-Hans
      static let sendErrorInvalidAmount = Rswift.StringResource(key: "send.error.invalidAmount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Invalid order. Try again!
      /// 
      /// Locales: en, zh-Hans
      static let verifyPassphraseInvalidOrderTitle = Rswift.StringResource(key: "verify.passphrase.invalidOrder.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: It's the latest version
      /// 
      /// Locales: en, zh-Hans
      static let version = Rswift.StringResource(key: "version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Join Community
      /// 
      /// Locales: en, zh-Hans
      static let settingsJoinCommunityLabelTitle = Rswift.StringResource(key: "settings.joinCommunity.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Keystore
      /// 
      /// Locales: en, zh-Hans
      static let keystore = Rswift.StringResource(key: "Keystore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Keystore JSON
      /// 
      /// Locales: en, zh-Hans
      static let keystoreJSON = Rswift.StringResource(key: "KeystoreJSON", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Learn More
      /// 
      /// Locales: en, zh-Hans
      static let learnMore = Rswift.StringResource(key: "LearnMore", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Loading
      /// 
      /// Locales: en, zh-Hans
      static let loading = Rswift.StringResource(key: "Loading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Loading %@
      /// 
      /// Locales: en, zh-Hans
      static let loadingDots = Rswift.StringResource(key: "loading.dots", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Logging in with Touch ID
      /// 
      /// Locales: en, zh-Hans
      static let lockEnterPasscodeViewModelTouchId = Rswift.StringResource(key: "lock.enter.passcode.view.model.touch.id", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Loss of backup phrase can put your wallet at risk!
      /// 
      /// Locales: en, zh-Hans
      static let verifyPassphraseSkipConfirmMessage = Rswift.StringResource(key: "verifyPassphrase.skip.confirm.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Main Wallet
      /// 
      /// Locales: en, zh-Hans
      static let mainWallet = Rswift.StringResource(key: "MainWallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Make sure you have backup of your wallet.
      /// 
      /// Locales: en, zh-Hans
      static let accountsConfirmDeleteMessage = Rswift.StringResource(key: "accounts.confirm.delete.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Manage
      /// 
      /// Locales: en, zh-Hans
      static let manage = Rswift.StringResource(key: "Manage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Max
      /// 
      /// Locales: en, zh-Hans
      static let sendMaxButtonTitle = Rswift.StringResource(key: "send.max.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Max Total
      /// 
      /// Locales: en, zh-Hans
      static let confirmPaymentMaxTotalLabelTitle = Rswift.StringResource(key: "confirmPayment.maxTotal.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: More Details
      /// 
      /// Locales: en, zh-Hans
      static let moreDetails = Rswift.StringResource(key: "MoreDetails", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Multi-Coin Wallet
      /// 
      /// Locales: en, zh-Hans
      static let multiCoinWallet = Rswift.StringResource(key: "MultiCoinWallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Multi-Coin Wallets
      /// 
      /// Locales: en, zh-Hans
      static let multiCoinWallets = Rswift.StringResource(key: "MultiCoinWallets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: My %1$@ address is: %2$@
      /// 
      /// Locales: en, zh-Hans
      static let requestMyAddressIsLabelTitle = Rswift.StringResource(key: "request.myAddressIs.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: My Address
      /// 
      /// Locales: en, zh-Hans
      static let transactionsMyAddressButtonTitle = Rswift.StringResource(key: "transactions.myAddress.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: My Public %@ wallet address
      /// 
      /// Locales: en, zh-Hans
      static let requestMyPublicaddressLabelTitle = Rswift.StringResource(key: "request.myPublicaddress.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: My Wallet Address
      /// 
      /// Locales: en, zh-Hans
      static let myWalletAddress = Rswift.StringResource(key: "MyWalletAddress", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Name
      /// 
      /// Locales: en, zh-Hans
      static let name = Rswift.StringResource(key: "Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Network
      /// 
      /// Locales: en, zh-Hans
      static let network = Rswift.StringResource(key: "Network", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Network
      /// 
      /// Locales: en, zh-Hans
      static let settingsNetworkButtonTitle = Rswift.StringResource(key: "settings.network.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Network Fee
      /// 
      /// Locales: en, zh-Hans
      static let confirmPaymentGasFeeLabelTitle = Rswift.StringResource(key: "confirmPayment.gasFee.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Network Fee
      /// 
      /// Locales: en, zh-Hans
      static let networkFee = Rswift.StringResource(key: "NetworkFee", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: New
      /// 
      /// Locales: en, zh-Hans
      static let new = Rswift.StringResource(key: "New", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Next
      /// 
      /// Locales: en, zh-Hans
      static let next = Rswift.StringResource(key: "Next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No Collectibles Found
      /// 
      /// Locales: en, zh-Hans
      static let emptyViewNoNonTokensLabelTitle = Rswift.StringResource(key: "emptyView.noNonTokens.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No Private Key for wallet
      /// 
      /// Locales: en, zh-Hans
      static let exportNoKPrivateKeyLabelTitle = Rswift.StringResource(key: "export.noKPrivateKey.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No Transactions Yet!
      /// 
      /// Locales: en, zh-Hans
      static let transactionsNoTransactionsLabelTitle = Rswift.StringResource(key: "transactions.noTransactions.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No backup, no %@.
      /// 
      /// Locales: en, zh-Hans
      static let exportNoBackupLabelTitle = Rswift.StringResource(key: "export.noBackup.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No bookmarks yet!
      /// 
      /// Locales: en, zh-Hans
      static let bookmarksNoBookmarksLabelTitle = Rswift.StringResource(key: "bookmarks.noBookmarks.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: No history yet!
      /// 
      /// Locales: en, zh-Hans
      static let historyNoHistoryLabelTitle = Rswift.StringResource(key: "history.noHistory.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Node Settings
      /// 
      /// Locales: en, zh-Hans
      static let nodeSettings = Rswift.StringResource(key: "NodeSettings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Nonce
      /// 
      /// Locales: en, zh-Hans
      static let nonce = Rswift.StringResource(key: "Nonce", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, zh-Hans
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Open Source Development
      /// 
      /// Locales: en, zh-Hans
      static let settingsOpenSourceDevelopmentLabelTitle = Rswift.StringResource(key: "settings.openSourceDevelopment.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Open on %@
      /// 
      /// Locales: en, zh-Hans
      static let nftDetailsInternalButtonTitle = Rswift.StringResource(key: "nft.details.internal.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Open on OpenSea.io
      /// 
      /// Locales: en, zh-Hans
      static let nftDetailsExternalButtonTitle = Rswift.StringResource(key: "nft.details.external.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: OpenSea
      /// 
      /// Locales: en, zh-Hans
      static let openSea = Rswift.StringResource(key: "OpenSea", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Outgoing Transaction
      /// 
      /// Locales: en, zh-Hans
      static let outgoingTransaction = Rswift.StringResource(key: "OutgoingTransaction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Passcode
      /// 
      /// Locales: en, zh-Hans
      static let settingsBiometricsDisabledLabelTitle = Rswift.StringResource(key: "settings.biometricsDisabled.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Passcode / %@
      /// 
      /// Locales: en, zh-Hans
      static let settingsBiometricsEnabledLabelTitle = Rswift.StringResource(key: "settings.biometricsEnabled.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en, zh-Hans
      static let enterPasswordPasswordTextFieldPlaceholder = Rswift.StringResource(key: "enterPassword.password.textField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en, zh-Hans
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Password used to encrypt your backup file to keep it secure!
      /// 
      /// Locales: en, zh-Hans
      static let enterPasswordPasswordHeaderPlaceholder = Rswift.StringResource(key: "enterPassword.password.header.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Passwords don't match!
      /// 
      /// Locales: en, zh-Hans
      static let enterPasswordPasswordNoMatchError = Rswift.StringResource(key: "enterPassword.passwordNoMatch.error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Paste
      /// 
      /// Locales: en, zh-Hans
      static let sendPasteButtonTitle = Rswift.StringResource(key: "send.paste.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Pending
      /// 
      /// Locales: en, zh-Hans
      static let transactionCellPendingTitle = Rswift.StringResource(key: "transaction.cell.pending.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Pending Transaction
      /// 
      /// Locales: en, zh-Hans
      static let pendingTransaction = Rswift.StringResource(key: "PendingTransaction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Phrase
      /// 
      /// Locales: en, zh-Hans
      static let phrase = Rswift.StringResource(key: "Phrase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please re-enter your passcode
      /// 
      /// Locales: en, zh-Hans
      static let lockCreatePasscodeViewModelConfirm = Rswift.StringResource(key: "lock.create.passcode.view.model.confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Popular
      /// 
      /// Locales: en, zh-Hans
      static let settingsCurrencyPopularLabelTitle = Rswift.StringResource(key: "settings.currency.popular.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Powered By
      /// 
      /// Locales: en, zh-Hans
      static let poweredBy = Rswift.StringResource(key: "PoweredBy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Preparing backup options...
      /// 
      /// Locales: en, zh-Hans
      static let exportPresentBackupOptionsLabelTitle = Rswift.StringResource(key: "export.presentBackupOptions.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Privacy
      /// 
      /// Locales: en, zh-Hans
      static let settingsPrivacyTitle = Rswift.StringResource(key: "settings.privacy.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Privacy Policy
      /// 
      /// Locales: en, zh-Hans
      static let settingsPrivacyPolicyButtonTitle = Rswift.StringResource(key: "settings.privacyPolicy.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Private & Secure
      /// 
      /// Locales: en, zh-Hans
      static let welcomePrivateAndSecureLabelTitle = Rswift.StringResource(key: "welcome.privateAndSecure.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Private Key
      /// 
      /// Locales: en, zh-Hans
      static let privateKey = Rswift.StringResource(key: "PrivateKey", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Private keys never leave your device.
      /// 
      /// Locales: en, zh-Hans
      static let welcomePrivateAndSecureLabelDescription = Rswift.StringResource(key: "welcome.privateAndSecure.label.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Push Notifications
      /// 
      /// Locales: en, zh-Hans
      static let settingsPushNotificationsButtonTitle = Rswift.StringResource(key: "settings.pushNotifications.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Push Notifications
      /// 
      /// Locales: en, zh-Hans
      static let settingsPushNotificationsTitle = Rswift.StringResource(key: "settings.pushNotifications.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: QR Code scan
      /// 
      /// Locales: en, zh-Hans
      static let browserQrCodeButtonTitle = Rswift.StringResource(key: "browser.qrCode.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Rate Us on App Store
      /// 
      /// Locales: en, zh-Hans
      static let settingsRateUsAppStoreButtonTitle = Rswift.StringResource(key: "settings.rateUsAppStore.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Receive
      /// 
      /// Locales: en, zh-Hans
      static let transactionsReceiveButtonTitle = Rswift.StringResource(key: "transactions.receive.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Received
      /// 
      /// Locales: en, zh-Hans
      static let transactionCellReceivedTitle = Rswift.StringResource(key: "transaction.cell.received.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Receiving
      /// 
      /// Locales: en, zh-Hans
      static let transactionCellReceivingTitle = Rswift.StringResource(key: "transaction.cell.receiving.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Recipient
      /// 
      /// Locales: en, zh-Hans
      static let transactionRecipientLabelTitle = Rswift.StringResource(key: "transaction.recipient.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Recipient Address
      /// 
      /// Locales: en, zh-Hans
      static let sendRecipientAddressTextFieldPlaceholder = Rswift.StringResource(key: "send.recipientAddress.textField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Refresh
      /// 
      /// Locales: en, zh-Hans
      static let refresh = Rswift.StringResource(key: "Refresh", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Reload
      /// 
      /// Locales: en, zh-Hans
      static let browserReloadButtonTitle = Rswift.StringResource(key: "browser.reload.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Reload
      /// 
      /// Locales: en, zh-Hans
      static let reload = Rswift.StringResource(key: "Reload", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Report a Bug
      /// 
      /// Locales: en, zh-Hans
      static let settingsReportBugButtonTitle = Rswift.StringResource(key: "settings.reportBug.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Retry
      /// 
      /// Locales: en, zh-Hans
      static let retry = Rswift.StringResource(key: "Retry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Search Engine
      /// 
      /// Locales: en, zh-Hans
      static let settingsBrowserSearchEngineTitle = Rswift.StringResource(key: "settings.browser.searchEngine.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Search or enter website url
      /// 
      /// Locales: en, zh-Hans
      static let browserUrlTextfieldPlaceholder = Rswift.StringResource(key: "browser.url.textfield.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Search tokens
      /// 
      /// Locales: en, zh-Hans
      static let editTokensSearchBarPlaceholderTitle = Rswift.StringResource(key: "editTokens.searchBar.placeholder.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Security
      /// 
      /// Locales: en, zh-Hans
      static let settingsSecurityLabelTitle = Rswift.StringResource(key: "settings.security.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Select Coin
      /// 
      /// Locales: en, zh-Hans
      static let selectCoin = Rswift.StringResource(key: "SelectCoin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Send
      /// 
      /// Locales: en, zh-Hans
      static let send = Rswift.StringResource(key: "Send", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sender
      /// 
      /// Locales: en, zh-Hans
      static let transactionSenderLabelTitle = Rswift.StringResource(key: "transaction.sender.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sending
      /// 
      /// Locales: en, zh-Hans
      static let transactionCellSendingTitle = Rswift.StringResource(key: "transaction.cell.sending.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sent
      /// 
      /// Locales: en, zh-Hans
      static let transactionCellSentTitle = Rswift.StringResource(key: "transaction.cell.sent.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sent and Receive
      /// 
      /// Locales: en, zh-Hans
      static let settingsPushNotificationsPaymentButtonTitle = Rswift.StringResource(key: "settings.pushNotifications.payment.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Set Passcode
      /// 
      /// Locales: en, zh-Hans
      static let lockCreatePasscodeViewModelTitle = Rswift.StringResource(key: "lock.create.passcode.view.model.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static let settingsNavigationTitle = Rswift.StringResource(key: "settings.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Several lines of text beginning with “{...}” plus the password you used to encrypt it
      /// 
      /// Locales: en, zh-Hans
      static let importKeystoreFooter = Rswift.StringResource(key: "import.keystore.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Share
      /// 
      /// Locales: en, zh-Hans
      static let share = Rswift.StringResource(key: "Share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Share With Friends
      /// 
      /// Locales: en, zh-Hans
      static let shareWithFriends = Rswift.StringResource(key: "ShareWithFriends", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Show Backup Phrase
      /// 
      /// Locales: en, zh-Hans
      static let walletInfoExportBackupPhrase = Rswift.StringResource(key: "wallet.info.exportBackupPhrase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Since only you control your money, you'll need to save your backup keystore in case this app is deleted.
      /// 
      /// Locales: en, zh-Hans
      static let exportControlYourMoneyLabelTitle = Rswift.StringResource(key: "export.controlYourMoney.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Skip
      /// 
      /// Locales: en, zh-Hans
      static let skip = Rswift.StringResource(key: "Skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Something went wrong... Try again later.
      /// 
      /// Locales: en, zh-Hans
      static let versionError = Rswift.StringResource(key: "versionError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Something went wrong... Try again.
      /// 
      /// Locales: en, zh-Hans
      static let errorViewDescriptionLabelTitle = Rswift.StringResource(key: "errorView.description.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Source Code
      /// 
      /// Locales: en, zh-Hans
      static let settingsSourceCodeButtonTitle = Rswift.StringResource(key: "settings.sourceCode.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Support
      /// 
      /// Locales: en, zh-Hans
      static let settingsSupportLabelTitle = Rswift.StringResource(key: "settings.support.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Support
      /// 
      /// Locales: en, zh-Hans
      static let settingsSupportTitle = Rswift.StringResource(key: "settings.support.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Support for ERC20 tokens by default. 
      /// 
      /// Locales: en, zh-Hans
      static let welcomeErc20LabelDescription = Rswift.StringResource(key: "welcome.erc20.label.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sure
      /// 
      /// Locales: en, zh-Hans
      static let sure = Rswift.StringResource(key: "Sure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Symbol
      /// 
      /// Locales: en, zh-Hans
      static let symbol = Rswift.StringResource(key: "Symbol", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Tap the words to put them next to each other in the correct order.
      /// 
      /// Locales: en, zh-Hans
      static let verifyPassphraseLabelTitle = Rswift.StringResource(key: "verifyPassphrase.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Terms of Service
      /// 
      /// Locales: en, zh-Hans
      static let settingsTermsOfServiceButtonTitle = Rswift.StringResource(key: "settings.termsOfService.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Test
      /// 
      /// Locales: en, zh-Hans
      static let settingsNetworkTestLabelTitle = Rswift.StringResource(key: "settings.network.test.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Test Networks
      /// 
      /// Locales: en, zh-Hans
      static let testNetworks = Rswift.StringResource(key: "TestNetworks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Thank you!
      /// 
      /// Locales: en, zh-Hans
      static let welldoneNavigationTitle = Rswift.StringResource(key: "welldone.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The fastest Ethereum wallet experience on mobile
      /// 
      /// Locales: en, zh-Hans
      static let welcomeUltraReliableLabelDescription = Rswift.StringResource(key: "welcome.ultraReliable.label.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: The gas limit prevents smart contracts from consuming all your %@. We will try to calculate the gas limit automatically for you, but some smart contracts may require a custom gas limit.
      /// 
      /// Locales: en, zh-Hans
      static let configureTransactionGasLimitLabelDescription = Rswift.StringResource(key: "configureTransaction.gasLimit.label.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: There is a new version. Are you sure you want to upgrade?
      /// 
      /// Locales: en, zh-Hans
      static let newVersion = Rswift.StringResource(key: "newVersion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: These 12 words are the only way to restore your Trust wallet.  Save them somewhere safe and secret.
      /// 
      /// Locales: en, zh-Hans
      static let passphraseSeedLabelTitle = Rswift.StringResource(key: "passphrase.seed.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: This wallet can be only used for watching. Import Private Key/Keystore to sign transactions/messages
      /// 
      /// Locales: en, zh-Hans
      static let inCoordinatorErrorOnlyWatchAccount = Rswift.StringResource(key: "InCoordinatorError.onlyWatchAccount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: This will clear cache, cookies, and other browsing data.
      /// 
      /// Locales: en, zh-Hans
      static let settingsBrowserClearCacheAlertMessage = Rswift.StringResource(key: "settings.browser.clearCache.alert.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: To
      /// 
      /// Locales: en, zh-Hans
      static let confirmPaymentToLabelTitle = Rswift.StringResource(key: "confirmPayment.to.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: To
      /// 
      /// Locales: en, zh-Hans
      static let transactionToLabelTitle = Rswift.StringResource(key: "transaction.to.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Today
      /// 
      /// Locales: en, zh-Hans
      static let today = Rswift.StringResource(key: "Today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Tokens
      /// 
      /// Locales: en, zh-Hans
      static let tokens = Rswift.StringResource(key: "Tokens", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Tokens
      /// 
      /// Locales: en, zh-Hans
      static let tokensNavigationTitle = Rswift.StringResource(key: "tokens.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Tokens
      /// 
      /// Locales: en, zh-Hans
      static let tokensTabbarItemTitle = Rswift.StringResource(key: "tokens.tabbar.item.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Tokens will appear automagically. Tap + to add manually.
      /// 
      /// Locales: en, zh-Hans
      static let tokensFooterLabelTitle = Rswift.StringResource(key: "tokens.footer.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Total network fee
      /// 
      /// Locales: en, zh-Hans
      static let configureTransactionTotalNetworkFeeLabelTitle = Rswift.StringResource(key: "configureTransaction.totalNetworkFee.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transaction #
      /// 
      /// Locales: en, zh-Hans
      static let transactionIdLabelTitle = Rswift.StringResource(key: "transaction.id.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transaction Data (Optional)
      /// 
      /// Locales: en, zh-Hans
      static let configureTransactionDataLabelTitle = Rswift.StringResource(key: "configureTransaction.data.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transaction Sent!
      /// 
      /// Locales: en, zh-Hans
      static let sentTransactionTitle = Rswift.StringResource(key: "sent.transaction.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transaction time
      /// 
      /// Locales: en, zh-Hans
      static let transactionTimeLabelTitle = Rswift.StringResource(key: "transaction.time.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transactions
      /// 
      /// Locales: en, zh-Hans
      static let transactionsTabbarItemTitle = Rswift.StringResource(key: "transactions.tabbar.item.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Transfer %@
      /// 
      /// Locales: en, zh-Hans
      static let transactionCellTokenTransferTitle = Rswift.StringResource(key: "transaction.cell.tokenTransfer.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Trust Feedback
      /// 
      /// Locales: en, zh-Hans
      static let settingsFeedbackEmailTitle = Rswift.StringResource(key: "settings.feedback.email.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Try after 1 minute.
      /// 
      /// Locales: en, zh-Hans
      static let lockEnterPasscodeViewModelTryAfterOneMinute = Rswift.StringResource(key: "lock.enter.passcode.view.model.try.after.one.minute", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Typically 12 (sometimes 24) words separated by single spaces
      /// 
      /// Locales: en, zh-Hans
      static let importMnemonicFooter = Rswift.StringResource(key: "import.mnemonic.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Typically 64 alphanumeric characters
      /// 
      /// Locales: en, zh-Hans
      static let importPrivateKeyFooter = Rswift.StringResource(key: "import.privateKey.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Ultra Reliable
      /// 
      /// Locales: en, zh-Hans
      static let welcomeUltraReliableLabelTitle = Rswift.StringResource(key: "welcome.ultraReliable.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Unknown
      /// 
      /// Locales: en, zh-Hans
      static let transactionCellUnknownTitle = Rswift.StringResource(key: "transaction.cell.unknown.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Verify Backup Phrase
      /// 
      /// Locales: en, zh-Hans
      static let verifyBackupPhrase = Rswift.StringResource(key: "VerifyBackupPhrase", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Version
      /// 
      /// Locales: en, zh-Hans
      static let settingsVersionLabelTitle = Rswift.StringResource(key: "settings.version.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wait for the transaction to be mined on the network to see details.
      /// 
      /// Locales: en, zh-Hans
      static let sentTransactionMessage = Rswift.StringResource(key: "sent.transaction.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static let wallet = Rswift.StringResource(key: "Wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static let walletNavigationTitle = Rswift.StringResource(key: "wallet.navigation.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet Created
      /// 
      /// Locales: en, zh-Hans
      static let walletCreated = Rswift.StringResource(key: "WalletCreated", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallet Imported
      /// 
      /// Locales: en, zh-Hans
      static let walletImported = Rswift.StringResource(key: "WalletImported", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wallets
      /// 
      /// Locales: en, zh-Hans
      static let wallets = Rswift.StringResource(key: "Wallets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Warning
      /// 
      /// Locales: en, zh-Hans
      static let settingsNetworkTestWarnningTitle = Rswift.StringResource(key: "settings.network.test.warnning.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Watch
      /// 
      /// Locales: en, zh-Hans
      static let watch = Rswift.StringResource(key: "Watch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Well done! %@
      /// 
      /// Locales: en, zh-Hans
      static let verifyPassphraseWelldoneTitle = Rswift.StringResource(key: "verify.passphrase.welldone.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: With a higher gas price, your transaction fee will be more expensive, but the %@ network will process your transaction faster.
      /// 
      /// Locales: en, zh-Hans
      static let configureTransactionGasPriceLabelDescription = Rswift.StringResource(key: "configureTransaction.gasPrice.label.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Words separated by a space. (Usually contains 12 words)
      /// 
      /// Locales: en, zh-Hans
      static let importWalletMnemonicPlaceholder = Rswift.StringResource(key: "import.wallet.mnemonic.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Wrong Input
      /// 
      /// Locales: en, zh-Hans
      static let sendErrorWrongInput = Rswift.StringResource(key: "send.error.wrongInput", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Yesterday
      /// 
      /// Locales: en, zh-Hans
      static let yesterday = Rswift.StringResource(key: "Yesterday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: You are switching to a test network where transactions are for testing purpose only
      /// 
      /// Locales: en, zh-Hans
      static let settingsNetworkTestWarnningMessage = Rswift.StringResource(key: "settings.network.test.warnning.message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: You can “watch” any public address without divulging your private key. This let’s you view balances and transactions, but not send transactions.
      /// 
      /// Locales: en, zh-Hans
      static let importWatchFooter = Rswift.StringResource(key: "import.watch.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: You haven't received any tokens yet!
      /// 
      /// Locales: en, zh-Hans
      static let emptyViewNoTokensLabelTitle = Rswift.StringResource(key: "emptyView.noTokens.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: You will be notified for sent and received transactions.
      /// 
      /// Locales: en, zh-Hans
      static let settingsPushNotificationsAllowPushNotificationsFooter = Rswift.StringResource(key: "settings.pushNotifications.allowPushNotifications.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Your wallet is never saved to cloud storage or standard device backups.
      /// 
      /// Locales: en, zh-Hans
      static let exportNeverStoredLabelTitle = Rswift.StringResource(key: "export.neverStored.label.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: iCloud/Dropbox/Google Drive
      /// 
      /// Locales: en, zh-Hans
      static let importWalletImportAlertSheetOptionTitle = Rswift.StringResource(key: "importWallet.import.alertSheet.option.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: via Changelly
      /// 
      /// Locales: en, zh-Hans
      static let depositBuyButtonChangellyTitle = Rswift.StringResource(key: "deposit.buy.button.changelly.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: via Coinbase
      /// 
      /// Locales: en, zh-Hans
      static let depositBuyButtonCoinbaseTitle = Rswift.StringResource(key: "deposit.buy.button.coinbase.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: via ShapeShift (Crypto only)
      /// 
      /// Locales: en, zh-Hans
      static let depositBuyButtonShapeShiftTitle = Rswift.StringResource(key: "deposit.buy.button.shapeShift.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      
      /// en translation: %@ Address
      /// 
      /// Locales: en, zh-Hans
      static func importWalletWatchPlaceholder(_ value1: String) -> String {
        return String(format: NSLocalizedString("import.wallet.watch.placeholder", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: About
      /// 
      /// Locales: en, zh-Hans
      static func settingsAboutTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.about.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add Bookmark
      /// 
      /// Locales: en, zh-Hans
      static func browserAddbookmarkButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.addbookmark.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add Custom Token
      /// 
      /// Locales: en, zh-Hans
      static func tokensNewtokenNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("tokens.newtoken.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address
      /// 
      /// Locales: en, zh-Hans
      static func address(_: Void = ()) -> String {
        return NSLocalizedString("Address", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Address copied
      /// 
      /// Locales: en, zh-Hans
      static func requestAddressCopiedTitle(_: Void = ()) -> String {
        return NSLocalizedString("request.addressCopied.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Addresses
      /// 
      /// Locales: en, zh-Hans
      static func addresses(_: Void = ()) -> String {
        return NSLocalizedString("Addresses", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Advanced
      /// 
      /// Locales: en, zh-Hans
      static func advanced(_: Void = ()) -> String {
        return NSLocalizedString("Advanced", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: All
      /// 
      /// Locales: en, zh-Hans
      static func settingsCurrencyAllLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.currency.all.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Allow Push Notifications
      /// 
      /// Locales: en, zh-Hans
      static func settingsAllowPushNotificationsButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.allowPushNotifications.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, zh-Hans
      static func confirmPaymentAmountLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.amount.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Amount
      /// 
      /// Locales: en, zh-Hans
      static func sendAmountTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("send.amount.textField.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Any 'jailbreak' app can access Trust's keychain data and steal your wallet! Wipe this wallet immediately and restore on a secure device.
      /// 
      /// Locales: en, zh-Hans
      static func appDeviceJailbreakDescription(_: Void = ()) -> String {
        return NSLocalizedString("app.device.jailbreak.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Anyone with your Private Key will have FULL access to your wallet!
      /// 
      /// Locales: en, zh-Hans
      static func exportWarningTwoPrivateKey(_: Void = ()) -> String {
        return NSLocalizedString("export.warningTwo.private.key", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Approve
      /// 
      /// Locales: en, zh-Hans
      static func approve(_: Void = ()) -> String {
        return NSLocalizedString("Approve", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure you want to skip this step?
      /// 
      /// Locales: en, zh-Hans
      static func verifyPassphraseSkipConfirmTitle(_: Void = ()) -> String {
        return NSLocalizedString("verifyPassphrase.skip.confirm.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure you would like to delete this bookmark?
      /// 
      /// Locales: en, zh-Hans
      static func browserBookmarksConfirmDeleteTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.bookmarks.confirm.delete.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure you would like to delete this wallet?
      /// 
      /// Locales: en, zh-Hans
      static func accountsConfirmDeleteTitle(_: Void = ()) -> String {
        return NSLocalizedString("accounts.confirm.delete.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure you would like to delete?
      /// 
      /// Locales: en, zh-Hans
      static func areYouSureYouWouldLikeToDelete(_: Void = ()) -> String {
        return NSLocalizedString("Are you sure you would like to delete?", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Auto-Lock
      /// 
      /// Locales: en, zh-Hans
      static func settingsAutoLockButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.autoLock.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Back
      /// 
      /// Locales: en, zh-Hans
      static func back(_: Void = ()) -> String {
        return NSLocalizedString("Back", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Backup Keystore
      /// 
      /// Locales: en, zh-Hans
      static func walletsBackupAlertSheetTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallets.backup.alertSheet.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Backup Password
      /// 
      /// Locales: en, zh-Hans
      static func enterPasswordNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("enterPassword.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Backup Phrase
      /// 
      /// Locales: en, zh-Hans
      static func backupPhrase(_: Void = ()) -> String {
        return NSLocalizedString("BackupPhrase", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Backup Wallet
      /// 
      /// Locales: en, zh-Hans
      static func exportBackupButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.backup.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Block #
      /// 
      /// Locales: en, zh-Hans
      static func transactionBlockNumberLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.blockNumber.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bookmarks
      /// 
      /// Locales: en, zh-Hans
      static func bookmarks(_: Void = ()) -> String {
        return NSLocalizedString("Bookmarks", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bookmarks
      /// 
      /// Locales: en, zh-Hans
      static func browserBookmarksButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.bookmarks.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bookmarks
      /// 
      /// Locales: en, zh-Hans
      static func browserBookmarksTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.bookmarks.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Browser
      /// 
      /// Locales: en, zh-Hans
      static func browserTabbarItemTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.tabbar.item.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Buy
      /// 
      /// Locales: en, zh-Hans
      static func transactionsDepositButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("transactions.deposit.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CREATE WALLET
      /// 
      /// Locales: en, zh-Hans
      static func welcomeCreateWalletButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("welcome.createWallet.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Chain ID
      /// 
      /// Locales: en, zh-Hans
      static func chainID(_: Void = ()) -> String {
        return NSLocalizedString("ChainID", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Check out Trust - the wallet that lets me securely store my Ethereum and ERC20 tokens.
      /// 
      /// Locales: en, zh-Hans
      static func welldoneViewmodelSharingText2(_: Void = ()) -> String {
        return NSLocalizedString("welldone.viewmodel.sharing.text2", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Check the update
      /// 
      /// Locales: en, zh-Hans
      static func settingsUpdateTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.update.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Clear Browser Cache
      /// 
      /// Locales: en, zh-Hans
      static func settingsBrowserClearCacheTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.browser.clearCache.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Clear Browsing Data?
      /// 
      /// Locales: en, zh-Hans
      static func settingsBrowserClearCacheAlertTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.browser.clearCache.alert.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Code is open sourced (GPL-3.0 license) and fully audited.
      /// 
      /// Locales: en, zh-Hans
      static func welcomeFullyTransparentLabelDescription(_: Void = ()) -> String {
        return NSLocalizedString("welcome.fullyTransparent.label.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Community
      /// 
      /// Locales: en, zh-Hans
      static func settingsCommunityLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.community.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm
      /// 
      /// Locales: en, zh-Hans
      static func confirmPaymentConfirmButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.confirm.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm Password
      /// 
      /// Locales: en, zh-Hans
      static func enterPasswordConfirmPasswordTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("enterPassword.confirmPassword.textField.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirmation
      /// 
      /// Locales: en, zh-Hans
      static func transactionConfirmationLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.confirmation.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Contract Address
      /// 
      /// Locales: en, zh-Hans
      static func contractAddress(_: Void = ()) -> String {
        return NSLocalizedString("ContractAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy
      /// 
      /// Locales: en, zh-Hans
      static func copy(_: Void = ()) -> String {
        return NSLocalizedString("Copy", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy Address
      /// 
      /// Locales: en, zh-Hans
      static func copyAddress(_: Void = ()) -> String {
        return NSLocalizedString("CopyAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy Transaction ID
      /// 
      /// Locales: en, zh-Hans
      static func sendActionCopyTransactionTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.action.copy.transaction.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy wallet address
      /// 
      /// Locales: en, zh-Hans
      static func requestCopyWalletButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("request.copyWallet.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Crash Reports
      /// 
      /// Locales: en, zh-Hans
      static func crashReports(_: Void = ()) -> String {
        return NSLocalizedString("CrashReports", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Creating Wallet
      /// 
      /// Locales: en, zh-Hans
      static func creatingWallet(_: Void = ()) -> String {
        return NSLocalizedString("CreatingWallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Currency
      /// 
      /// Locales: en, zh-Hans
      static func settingsCurrencyButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.currency.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Custom
      /// 
      /// Locales: en, zh-Hans
      static func settingsNetworkCustomLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.network.custom.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Custom Network
      /// 
      /// Locales: en, zh-Hans
      static func settingsCustomNetworkNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.customNetwork.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: DApp
      /// 
      /// Locales: en, zh-Hans
      static func confirmPaymentDappLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.dapp.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: DApp Browser
      /// 
      /// Locales: en, zh-Hans
      static func settingsBrowserTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.browser.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: DEVICE SECURITY COMPROMISED
      /// 
      /// Locales: en, zh-Hans
      static func appDeviceJailbreakTitle(_: Void = ()) -> String {
        return NSLocalizedString("app.device.jailbreak.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Daily Usage
      /// 
      /// Locales: en, zh-Hans
      static func dailyUsage(_: Void = ()) -> String {
        return NSLocalizedString("DailyUsage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Data
      /// 
      /// Locales: en, zh-Hans
      static func confirmPaymentDataLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.data.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Data (Optional). %@
      /// 
      /// Locales: en, zh-Hans
      static func configureTransactionDataFieldLabelTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("configureTransaction.dataField.label.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Decimals
      /// 
      /// Locales: en, zh-Hans
      static func decimals(_: Void = ()) -> String {
        return NSLocalizedString("Decimals", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deferred Deep Linking
      /// 
      /// Locales: en, zh-Hans
      static func deferredDeepLinking(_: Void = ()) -> String {
        return NSLocalizedString("DeferredDeepLinking", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete
      /// 
      /// Locales: en, zh-Hans
      static func delete(_: Void = ()) -> String {
        return NSLocalizedString("Delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deleting
      /// 
      /// Locales: en, zh-Hans
      static func deleting(_: Void = ()) -> String {
        return NSLocalizedString("Deleting", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deploy smart contract
      /// 
      /// Locales: en, zh-Hans
      static func transactionDeployContractLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.deployContract.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Developer
      /// 
      /// Locales: en, zh-Hans
      static func developer(_: Void = ()) -> String {
        return NSLocalizedString("Developer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Disable
      /// 
      /// Locales: en, zh-Hans
      static func disable(_: Void = ()) -> String {
        return NSLocalizedString("Disable", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Do it later
      /// 
      /// Locales: en, zh-Hans
      static func exportSkipButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.skip.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Don't show again
      /// 
      /// Locales: en, zh-Hans
      static func settingsNetworkTestWarnningDontShowAgain(_: Void = ()) -> String {
        return NSLocalizedString("settings.network.test.warnning.dont.show.again", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Donate
      /// 
      /// Locales: en, zh-Hans
      static func settingsDonateButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.donate.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Done
      /// 
      /// Locales: en, zh-Hans
      static func done(_: Void = ()) -> String {
        return NSLocalizedString("Done", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: DuckDuckGo
      /// 
      /// Locales: en, zh-Hans
      static func duckDuckGo(_: Void = ()) -> String {
        return NSLocalizedString("DuckDuckGo", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ERC20 Compatible
      /// 
      /// Locales: en, zh-Hans
      static func welcomeErc20LabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("welcome.erc20.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit
      /// 
      /// Locales: en, zh-Hans
      static func edit(_: Void = ()) -> String {
        return NSLocalizedString("Edit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit Custom Token
      /// 
      /// Locales: en, zh-Hans
      static func tokensTokenEditNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("tokens.token.edit.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Email Us
      /// 
      /// Locales: en, zh-Hans
      static func settingsEmailUsButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.emailUs.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Email Us (Read FAQ first)
      /// 
      /// Locales: en, zh-Hans
      static func settingsEmailUsReadFAQButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.emailUsReadFAQ.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Empty
      /// 
      /// Locales: en, zh-Hans
      static func empty(_: Void = ()) -> String {
        return NSLocalizedString("Empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Empty ClipBoard
      /// 
      /// Locales: en, zh-Hans
      static func sendErrorEmptyClipBoard(_: Void = ()) -> String {
        return NSLocalizedString("send.error.emptyClipBoard", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enable Test Networks
      /// 
      /// Locales: en, zh-Hans
      static func enableTestNetworks(_: Void = ()) -> String {
        return NSLocalizedString("EnableTestNetworks", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Endpoint
      /// 
      /// Locales: en, zh-Hans
      static func endpoint(_: Void = ()) -> String {
        return NSLocalizedString("Endpoint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter a new passcode
      /// 
      /// Locales: en, zh-Hans
      static func lockCreatePasscodeViewModelInitial(_: Void = ()) -> String {
        return NSLocalizedString("lock.create.passcode.view.model.initial", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter current password to export your wallet
      /// 
      /// Locales: en, zh-Hans
      static func exportEnterCurrentPasswordTextFieldTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.enterCurrentPassword.textField.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter password to encrypt your wallet
      /// 
      /// Locales: en, zh-Hans
      static func exportEnterPasswordTextFieldTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.enterPassword.textField.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enter your passcode.
      /// 
      /// Locales: en, zh-Hans
      static func lockEnterPasscodeViewModelInitial(_: Void = ()) -> String {
        return NSLocalizedString("lock.enter.passcode.view.model.initial", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error
      /// 
      /// Locales: en, zh-Hans
      static func transactionCellErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.error.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ethereum Address
      /// 
      /// Locales: en, zh-Hans
      static func ethereumAddress(_: Void = ()) -> String {
        return NSLocalizedString("EthereumAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Exchange
      /// 
      /// Locales: en, zh-Hans
      static func collectibles(_: Void = ()) -> String {
        return NSLocalizedString("Collectibles", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Explore on OpenSea.io
      /// 
      /// Locales: en, zh-Hans
      static func collectiblesDiscoverLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("collectibles.discover.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Export Private Key
      /// 
      /// Locales: en, zh-Hans
      static func exportPrivateKeyNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.privateKey.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Export Private Key
      /// 
      /// Locales: en, zh-Hans
      static func walletsExportAlertSheetTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallets.export.alertSheet.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Export at your own risk!
      /// 
      /// Locales: en, zh-Hans
      static func exportWarningPrivateKey(_: Void = ()) -> String {
        return NSLocalizedString("export.warning.private.key", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: FAQ
      /// 
      /// Locales: en, zh-Hans
      static func settingsFaqButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.faq.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed
      /// 
      /// Locales: en, zh-Hans
      static func transactionCellFailedTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.failed.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to send email. Make sure you have Mail app installed.
      /// 
      /// Locales: en, zh-Hans
      static func settingsErrorFailedToSendEmail(_: Void = ()) -> String {
        return NSLocalizedString("settings.error.failedToSendEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: From
      /// 
      /// Locales: en, zh-Hans
      static func confirmPaymentFromLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.from.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: From
      /// 
      /// Locales: en, zh-Hans
      static func transactionFromLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.from.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fully transparent
      /// 
      /// Locales: en, zh-Hans
      static func welcomeFullyTransparentLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("welcome.fullyTransparent.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gas Fee is too high. Max available: %1$@ %2$@
      /// 
      /// Locales: en, zh-Hans
      static func configureTransactionErrorGasFeeHigh(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("configureTransaction.error.gasFeeHigh", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: Gas Fee too high. Max available: %@
      /// 
      /// Locales: en, zh-Hans
      static func configureTransactionErrorGasFeeTooHigh(_ value1: String) -> String {
        return String(format: NSLocalizedString("configureTransaction.error.gasFeeTooHigh", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Gas Limit
      /// 
      /// Locales: en, zh-Hans
      static func configureTransactionGasLimitLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("configureTransaction.gasLimit.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gas Limit
      /// 
      /// Locales: en, zh-Hans
      static func confirmPaymentGasLimitLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.gasLimit.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gas Limit too high. Max available: %li
      /// 
      /// Locales: en, zh-Hans
      static func configureTransactionErrorGasLimitTooHigh(_ value1: Int) -> String {
        return String(format: NSLocalizedString("configureTransaction.error.gasLimitTooHigh", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Gas Price
      /// 
      /// Locales: en, zh-Hans
      static func configureTransactionGasPriceLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("configureTransaction.gasPrice.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gas Price
      /// 
      /// Locales: en, zh-Hans
      static func confirmPaymentGasPriceLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.gasPrice.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gas Price (Gwei)
      /// 
      /// Locales: en, zh-Hans
      static func configureTransactionGasPriceGweiLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("configureTransaction.gasPriceGwei.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Generating QR Code
      /// 
      /// Locales: en, zh-Hans
      static func exportQrCodeLoadingLabel(_: Void = ()) -> String {
        return NSLocalizedString("export.qrCode.loading.label", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Google
      /// 
      /// Locales: en, zh-Hans
      static func google(_: Void = ()) -> String {
        return NSLocalizedString("Google", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: HD Wallet
      /// 
      /// Locales: en, zh-Hans
      static func walletSectionHdWalletTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallet.section.hdWallet.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Help Center
      /// 
      /// Locales: en, zh-Hans
      static func settingsHelpCenterTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.helpCenter.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Help Trust developers to improve its product and service by automatically sending crash reports.
      /// 
      /// Locales: en, zh-Hans
      static func settingsAnaliticsCrashlyticsDescription(_: Void = ()) -> String {
        return NSLocalizedString("settings.analitics.crashlytics.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Help Trust improve user engagement by sharing deep links redirects.
      /// 
      /// Locales: en, zh-Hans
      static func settingsAnaliticsBranchDescription(_: Void = ()) -> String {
        return NSLocalizedString("settings.analitics.branch.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Help Trust improve user experience by sharing app daily diagnostic.
      /// 
      /// Locales: en, zh-Hans
      static func settingsAnaliticsAnswerDescription(_: Void = ()) -> String {
        return NSLocalizedString("settings.analitics.answer.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Help us grow by sharing this app with your friends!
      /// 
      /// Locales: en, zh-Hans
      static func welldoneDescriptionLabelText(_: Void = ()) -> String {
        return NSLocalizedString("welldone.description.label.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Here is the app I use to store my ETH and ERC20 tokens.
      /// 
      /// Locales: en, zh-Hans
      static func welldoneViewmodelSharingText1(_: Void = ()) -> String {
        return NSLocalizedString("welldone.viewmodel.sharing.text1", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: History
      /// 
      /// Locales: en, zh-Hans
      static func history(_: Void = ()) -> String {
        return NSLocalizedString("History", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Home
      /// 
      /// Locales: en, zh-Hans
      static func browserHomeButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.home.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: How would you like to buy?
      /// 
      /// Locales: en, zh-Hans
      static func depositBuyLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("deposit.buy.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I secure my Ethereum and ERC20 tokens in the Trust wallet.
      /// 
      /// Locales: en, zh-Hans
      static func welldoneViewmodelSharingText4(_: Void = ()) -> String {
        return NSLocalizedString("welldone.viewmodel.sharing.text4", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: I securely store Ethereum and ERC20 tokens in the Trust wallet
      /// 
      /// Locales: en, zh-Hans
      static func welldoneViewmodelSharingText3(_: Void = ()) -> String {
        return NSLocalizedString("welldone.viewmodel.sharing.text3", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: IMPORT WALLET
      /// 
      /// Locales: en, zh-Hans
      static func welcomeImportWalletButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("welcome.importWallet.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: If away for 1 hour
      /// 
      /// Locales: en, zh-Hans
      static func walletsNavigationTitleAutolockOneHour(_: Void = ()) -> String {
        return NSLocalizedString("wallets.navigation.title.autolock.one.hour", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: If away for 1 minute
      /// 
      /// Locales: en, zh-Hans
      static func walletsNavigationTitleAutolockOneMinute(_: Void = ()) -> String {
        return NSLocalizedString("wallets.navigation.title.autolock.one.minute", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: If away for 5 hours
      /// 
      /// Locales: en, zh-Hans
      static func walletsNavigationTitleAutolockFiveHour(_: Void = ()) -> String {
        return NSLocalizedString("wallets.navigation.title.autolock.five.hour", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: If away for 5 minutes
      /// 
      /// Locales: en, zh-Hans
      static func walletsNavigationTitleAutolockFiveMinutes(_: Void = ()) -> String {
        return NSLocalizedString("wallets.navigation.title.autolock.five.minutes", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Immediate
      /// 
      /// Locales: en, zh-Hans
      static func walletsNavigationTitleAutolockImmediate(_: Void = ()) -> String {
        return NSLocalizedString("wallets.navigation.title.autolock.immediate", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import
      /// 
      /// Locales: en, zh-Hans
      static func importWalletImportButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("importWallet.import.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import Main Wallet
      /// 
      /// Locales: en, zh-Hans
      static func importMainWallet(_: Void = ()) -> String {
        return NSLocalizedString("ImportMainWallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import Wallet
      /// 
      /// Locales: en, zh-Hans
      static func importNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("import.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Import Wallet Options
      /// 
      /// Locales: en, zh-Hans
      static func importWalletImportAlertSheetTitle(_: Void = ()) -> String {
        return NSLocalizedString("importWallet.import.alertSheet.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Imported Wallets
      /// 
      /// Locales: en, zh-Hans
      static func importedWallets(_: Void = ()) -> String {
        return NSLocalizedString("ImportedWallets", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Importing wallet...
      /// 
      /// Locales: en, zh-Hans
      static func importWalletImportingIndicatorLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("importWallet.importingIndicator.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Incoming Transaction
      /// 
      /// Locales: en, zh-Hans
      static func incomingTransaction(_: Void = ()) -> String {
        return NSLocalizedString("IncomingTransaction", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Incorrect passcode. You have %li attempts left.
      /// 
      /// Locales: en, zh-Hans
      static func lockEnterPasscodeViewModelIncorrectPasscode(_ value1: Int) -> String {
        return String(format: NSLocalizedString("lock.enter.passcode.view.model.incorrect.passcode", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Infura
      /// 
      /// Locales: en, zh-Hans
      static func infura(_: Void = ()) -> String {
        return NSLocalizedString("Infura", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Insufficient %@ balance
      /// 
      /// Locales: en, zh-Hans
      static func sendErrorInsufficientEther(_ value1: String) -> String {
        return String(format: NSLocalizedString("send.error.insufficientEther", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Insufficient %@ to cover gas fee
      /// 
      /// Locales: en, zh-Hans
      static func sendErrorInsufficientGas(_ value1: String) -> String {
        return String(format: NSLocalizedString("send.error.insufficientGas", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Insufficient %@ token balance
      /// 
      /// Locales: en, zh-Hans
      static func sendErrorInsufficientToken(_ value1: String) -> String {
        return String(format: NSLocalizedString("send.error.insufficientToken", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Invalid Address
      /// 
      /// Locales: en, zh-Hans
      static func sendErrorInvalidAddress(_: Void = ()) -> String {
        return NSLocalizedString("send.error.invalidAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid Amount
      /// 
      /// Locales: en, zh-Hans
      static func sendErrorInvalidAmount(_: Void = ()) -> String {
        return NSLocalizedString("send.error.invalidAmount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid order. Try again!
      /// 
      /// Locales: en, zh-Hans
      static func verifyPassphraseInvalidOrderTitle(_: Void = ()) -> String {
        return NSLocalizedString("verify.passphrase.invalidOrder.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: It's the latest version
      /// 
      /// Locales: en, zh-Hans
      static func version(_: Void = ()) -> String {
        return NSLocalizedString("version", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Join Community
      /// 
      /// Locales: en, zh-Hans
      static func settingsJoinCommunityLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.joinCommunity.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Keystore
      /// 
      /// Locales: en, zh-Hans
      static func keystore(_: Void = ()) -> String {
        return NSLocalizedString("Keystore", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Keystore JSON
      /// 
      /// Locales: en, zh-Hans
      static func keystoreJSON(_: Void = ()) -> String {
        return NSLocalizedString("KeystoreJSON", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Learn More
      /// 
      /// Locales: en, zh-Hans
      static func learnMore(_: Void = ()) -> String {
        return NSLocalizedString("LearnMore", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loading
      /// 
      /// Locales: en, zh-Hans
      static func loading(_: Void = ()) -> String {
        return NSLocalizedString("Loading", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loading %@
      /// 
      /// Locales: en, zh-Hans
      static func loadingDots(_ value1: String) -> String {
        return String(format: NSLocalizedString("loading.dots", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Logging in with Touch ID
      /// 
      /// Locales: en, zh-Hans
      static func lockEnterPasscodeViewModelTouchId(_: Void = ()) -> String {
        return NSLocalizedString("lock.enter.passcode.view.model.touch.id", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Loss of backup phrase can put your wallet at risk!
      /// 
      /// Locales: en, zh-Hans
      static func verifyPassphraseSkipConfirmMessage(_: Void = ()) -> String {
        return NSLocalizedString("verifyPassphrase.skip.confirm.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Main Wallet
      /// 
      /// Locales: en, zh-Hans
      static func mainWallet(_: Void = ()) -> String {
        return NSLocalizedString("MainWallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Make sure you have backup of your wallet.
      /// 
      /// Locales: en, zh-Hans
      static func accountsConfirmDeleteMessage(_: Void = ()) -> String {
        return NSLocalizedString("accounts.confirm.delete.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Manage
      /// 
      /// Locales: en, zh-Hans
      static func manage(_: Void = ()) -> String {
        return NSLocalizedString("Manage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Max
      /// 
      /// Locales: en, zh-Hans
      static func sendMaxButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.max.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Max Total
      /// 
      /// Locales: en, zh-Hans
      static func confirmPaymentMaxTotalLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.maxTotal.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: More Details
      /// 
      /// Locales: en, zh-Hans
      static func moreDetails(_: Void = ()) -> String {
        return NSLocalizedString("MoreDetails", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Multi-Coin Wallet
      /// 
      /// Locales: en, zh-Hans
      static func multiCoinWallet(_: Void = ()) -> String {
        return NSLocalizedString("MultiCoinWallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Multi-Coin Wallets
      /// 
      /// Locales: en, zh-Hans
      static func multiCoinWallets(_: Void = ()) -> String {
        return NSLocalizedString("MultiCoinWallets", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My %1$@ address is: %2$@
      /// 
      /// Locales: en, zh-Hans
      static func requestMyAddressIsLabelTitle(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("request.myAddressIs.label.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: My Address
      /// 
      /// Locales: en, zh-Hans
      static func transactionsMyAddressButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("transactions.myAddress.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Public %@ wallet address
      /// 
      /// Locales: en, zh-Hans
      static func requestMyPublicaddressLabelTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("request.myPublicaddress.label.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: My Wallet Address
      /// 
      /// Locales: en, zh-Hans
      static func myWalletAddress(_: Void = ()) -> String {
        return NSLocalizedString("MyWalletAddress", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Name
      /// 
      /// Locales: en, zh-Hans
      static func name(_: Void = ()) -> String {
        return NSLocalizedString("Name", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Network
      /// 
      /// Locales: en, zh-Hans
      static func network(_: Void = ()) -> String {
        return NSLocalizedString("Network", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Network
      /// 
      /// Locales: en, zh-Hans
      static func settingsNetworkButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.network.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Network Fee
      /// 
      /// Locales: en, zh-Hans
      static func confirmPaymentGasFeeLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.gasFee.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Network Fee
      /// 
      /// Locales: en, zh-Hans
      static func networkFee(_: Void = ()) -> String {
        return NSLocalizedString("NetworkFee", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New
      /// 
      /// Locales: en, zh-Hans
      static func new(_: Void = ()) -> String {
        return NSLocalizedString("New", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next
      /// 
      /// Locales: en, zh-Hans
      static func next(_: Void = ()) -> String {
        return NSLocalizedString("Next", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No Collectibles Found
      /// 
      /// Locales: en, zh-Hans
      static func emptyViewNoNonTokensLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("emptyView.noNonTokens.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No Private Key for wallet
      /// 
      /// Locales: en, zh-Hans
      static func exportNoKPrivateKeyLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.noKPrivateKey.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No Transactions Yet!
      /// 
      /// Locales: en, zh-Hans
      static func transactionsNoTransactionsLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transactions.noTransactions.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No backup, no %@.
      /// 
      /// Locales: en, zh-Hans
      static func exportNoBackupLabelTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("export.noBackup.label.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: No bookmarks yet!
      /// 
      /// Locales: en, zh-Hans
      static func bookmarksNoBookmarksLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("bookmarks.noBookmarks.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: No history yet!
      /// 
      /// Locales: en, zh-Hans
      static func historyNoHistoryLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("history.noHistory.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Node Settings
      /// 
      /// Locales: en, zh-Hans
      static func nodeSettings(_: Void = ()) -> String {
        return NSLocalizedString("NodeSettings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Nonce
      /// 
      /// Locales: en, zh-Hans
      static func nonce(_: Void = ()) -> String {
        return NSLocalizedString("Nonce", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, zh-Hans
      static func oK(_: Void = ()) -> String {
        return NSLocalizedString("OK", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Open Source Development
      /// 
      /// Locales: en, zh-Hans
      static func settingsOpenSourceDevelopmentLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.openSourceDevelopment.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Open on %@
      /// 
      /// Locales: en, zh-Hans
      static func nftDetailsInternalButtonTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("nft.details.internal.button.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Open on OpenSea.io
      /// 
      /// Locales: en, zh-Hans
      static func nftDetailsExternalButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("nft.details.external.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OpenSea
      /// 
      /// Locales: en, zh-Hans
      static func openSea(_: Void = ()) -> String {
        return NSLocalizedString("OpenSea", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Outgoing Transaction
      /// 
      /// Locales: en, zh-Hans
      static func outgoingTransaction(_: Void = ()) -> String {
        return NSLocalizedString("OutgoingTransaction", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Passcode
      /// 
      /// Locales: en, zh-Hans
      static func settingsBiometricsDisabledLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.biometricsDisabled.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Passcode / %@
      /// 
      /// Locales: en, zh-Hans
      static func settingsBiometricsEnabledLabelTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("settings.biometricsEnabled.label.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Password
      /// 
      /// Locales: en, zh-Hans
      static func enterPasswordPasswordTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("enterPassword.password.textField.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en, zh-Hans
      static func password(_: Void = ()) -> String {
        return NSLocalizedString("Password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password used to encrypt your backup file to keep it secure!
      /// 
      /// Locales: en, zh-Hans
      static func enterPasswordPasswordHeaderPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("enterPassword.password.header.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Passwords don't match!
      /// 
      /// Locales: en, zh-Hans
      static func enterPasswordPasswordNoMatchError(_: Void = ()) -> String {
        return NSLocalizedString("enterPassword.passwordNoMatch.error", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Paste
      /// 
      /// Locales: en, zh-Hans
      static func sendPasteButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("send.paste.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pending
      /// 
      /// Locales: en, zh-Hans
      static func transactionCellPendingTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.pending.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pending Transaction
      /// 
      /// Locales: en, zh-Hans
      static func pendingTransaction(_: Void = ()) -> String {
        return NSLocalizedString("PendingTransaction", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Phrase
      /// 
      /// Locales: en, zh-Hans
      static func phrase(_: Void = ()) -> String {
        return NSLocalizedString("Phrase", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please re-enter your passcode
      /// 
      /// Locales: en, zh-Hans
      static func lockCreatePasscodeViewModelConfirm(_: Void = ()) -> String {
        return NSLocalizedString("lock.create.passcode.view.model.confirm", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Popular
      /// 
      /// Locales: en, zh-Hans
      static func settingsCurrencyPopularLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.currency.popular.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Powered By
      /// 
      /// Locales: en, zh-Hans
      static func poweredBy(_: Void = ()) -> String {
        return NSLocalizedString("PoweredBy", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Preparing backup options...
      /// 
      /// Locales: en, zh-Hans
      static func exportPresentBackupOptionsLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.presentBackupOptions.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Privacy
      /// 
      /// Locales: en, zh-Hans
      static func settingsPrivacyTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.privacy.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Privacy Policy
      /// 
      /// Locales: en, zh-Hans
      static func settingsPrivacyPolicyButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.privacyPolicy.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Private & Secure
      /// 
      /// Locales: en, zh-Hans
      static func welcomePrivateAndSecureLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("welcome.privateAndSecure.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Private Key
      /// 
      /// Locales: en, zh-Hans
      static func privateKey(_: Void = ()) -> String {
        return NSLocalizedString("PrivateKey", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Private keys never leave your device.
      /// 
      /// Locales: en, zh-Hans
      static func welcomePrivateAndSecureLabelDescription(_: Void = ()) -> String {
        return NSLocalizedString("welcome.privateAndSecure.label.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Push Notifications
      /// 
      /// Locales: en, zh-Hans
      static func settingsPushNotificationsButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.pushNotifications.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Push Notifications
      /// 
      /// Locales: en, zh-Hans
      static func settingsPushNotificationsTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.pushNotifications.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: QR Code scan
      /// 
      /// Locales: en, zh-Hans
      static func browserQrCodeButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.qrCode.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Rate Us on App Store
      /// 
      /// Locales: en, zh-Hans
      static func settingsRateUsAppStoreButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.rateUsAppStore.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive
      /// 
      /// Locales: en, zh-Hans
      static func transactionsReceiveButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("transactions.receive.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Received
      /// 
      /// Locales: en, zh-Hans
      static func transactionCellReceivedTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.received.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receiving
      /// 
      /// Locales: en, zh-Hans
      static func transactionCellReceivingTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.receiving.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recipient
      /// 
      /// Locales: en, zh-Hans
      static func transactionRecipientLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.recipient.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recipient Address
      /// 
      /// Locales: en, zh-Hans
      static func sendRecipientAddressTextFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("send.recipientAddress.textField.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Refresh
      /// 
      /// Locales: en, zh-Hans
      static func refresh(_: Void = ()) -> String {
        return NSLocalizedString("Refresh", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reload
      /// 
      /// Locales: en, zh-Hans
      static func browserReloadButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("browser.reload.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reload
      /// 
      /// Locales: en, zh-Hans
      static func reload(_: Void = ()) -> String {
        return NSLocalizedString("Reload", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Report a Bug
      /// 
      /// Locales: en, zh-Hans
      static func settingsReportBugButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.reportBug.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Retry
      /// 
      /// Locales: en, zh-Hans
      static func retry(_: Void = ()) -> String {
        return NSLocalizedString("Retry", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search Engine
      /// 
      /// Locales: en, zh-Hans
      static func settingsBrowserSearchEngineTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.browser.searchEngine.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search or enter website url
      /// 
      /// Locales: en, zh-Hans
      static func browserUrlTextfieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("browser.url.textfield.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search tokens
      /// 
      /// Locales: en, zh-Hans
      static func editTokensSearchBarPlaceholderTitle(_: Void = ()) -> String {
        return NSLocalizedString("editTokens.searchBar.placeholder.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Security
      /// 
      /// Locales: en, zh-Hans
      static func settingsSecurityLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.security.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Select Coin
      /// 
      /// Locales: en, zh-Hans
      static func selectCoin(_: Void = ()) -> String {
        return NSLocalizedString("SelectCoin", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Send
      /// 
      /// Locales: en, zh-Hans
      static func send(_: Void = ()) -> String {
        return NSLocalizedString("Send", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sender
      /// 
      /// Locales: en, zh-Hans
      static func transactionSenderLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.sender.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sending
      /// 
      /// Locales: en, zh-Hans
      static func transactionCellSendingTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.sending.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sent
      /// 
      /// Locales: en, zh-Hans
      static func transactionCellSentTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.sent.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sent and Receive
      /// 
      /// Locales: en, zh-Hans
      static func settingsPushNotificationsPaymentButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.pushNotifications.payment.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Set Passcode
      /// 
      /// Locales: en, zh-Hans
      static func lockCreatePasscodeViewModelTitle(_: Void = ()) -> String {
        return NSLocalizedString("lock.create.passcode.view.model.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static func settingsNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Several lines of text beginning with “{...}” plus the password you used to encrypt it
      /// 
      /// Locales: en, zh-Hans
      static func importKeystoreFooter(_: Void = ()) -> String {
        return NSLocalizedString("import.keystore.footer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Share
      /// 
      /// Locales: en, zh-Hans
      static func share(_: Void = ()) -> String {
        return NSLocalizedString("Share", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Share With Friends
      /// 
      /// Locales: en, zh-Hans
      static func shareWithFriends(_: Void = ()) -> String {
        return NSLocalizedString("ShareWithFriends", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Show Backup Phrase
      /// 
      /// Locales: en, zh-Hans
      static func walletInfoExportBackupPhrase(_: Void = ()) -> String {
        return NSLocalizedString("wallet.info.exportBackupPhrase", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Since only you control your money, you'll need to save your backup keystore in case this app is deleted.
      /// 
      /// Locales: en, zh-Hans
      static func exportControlYourMoneyLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.controlYourMoney.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Skip
      /// 
      /// Locales: en, zh-Hans
      static func skip(_: Void = ()) -> String {
        return NSLocalizedString("Skip", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something went wrong... Try again later.
      /// 
      /// Locales: en, zh-Hans
      static func versionError(_: Void = ()) -> String {
        return NSLocalizedString("versionError", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Something went wrong... Try again.
      /// 
      /// Locales: en, zh-Hans
      static func errorViewDescriptionLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("errorView.description.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Source Code
      /// 
      /// Locales: en, zh-Hans
      static func settingsSourceCodeButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.sourceCode.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Support
      /// 
      /// Locales: en, zh-Hans
      static func settingsSupportLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.support.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Support
      /// 
      /// Locales: en, zh-Hans
      static func settingsSupportTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.support.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Support for ERC20 tokens by default. 
      /// 
      /// Locales: en, zh-Hans
      static func welcomeErc20LabelDescription(_: Void = ()) -> String {
        return NSLocalizedString("welcome.erc20.label.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sure
      /// 
      /// Locales: en, zh-Hans
      static func sure(_: Void = ()) -> String {
        return NSLocalizedString("Sure", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Symbol
      /// 
      /// Locales: en, zh-Hans
      static func symbol(_: Void = ()) -> String {
        return NSLocalizedString("Symbol", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tap the words to put them next to each other in the correct order.
      /// 
      /// Locales: en, zh-Hans
      static func verifyPassphraseLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("verifyPassphrase.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Terms of Service
      /// 
      /// Locales: en, zh-Hans
      static func settingsTermsOfServiceButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.termsOfService.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Test
      /// 
      /// Locales: en, zh-Hans
      static func settingsNetworkTestLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.network.test.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Test Networks
      /// 
      /// Locales: en, zh-Hans
      static func testNetworks(_: Void = ()) -> String {
        return NSLocalizedString("TestNetworks", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Thank you!
      /// 
      /// Locales: en, zh-Hans
      static func welldoneNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("welldone.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The fastest Ethereum wallet experience on mobile
      /// 
      /// Locales: en, zh-Hans
      static func welcomeUltraReliableLabelDescription(_: Void = ()) -> String {
        return NSLocalizedString("welcome.ultraReliable.label.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The gas limit prevents smart contracts from consuming all your %@. We will try to calculate the gas limit automatically for you, but some smart contracts may require a custom gas limit.
      /// 
      /// Locales: en, zh-Hans
      static func configureTransactionGasLimitLabelDescription(_ value1: String) -> String {
        return String(format: NSLocalizedString("configureTransaction.gasLimit.label.description", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: There is a new version. Are you sure you want to upgrade?
      /// 
      /// Locales: en, zh-Hans
      static func newVersion(_: Void = ()) -> String {
        return NSLocalizedString("newVersion", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: These 12 words are the only way to restore your Trust wallet.  Save them somewhere safe and secret.
      /// 
      /// Locales: en, zh-Hans
      static func passphraseSeedLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("passphrase.seed.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This wallet can be only used for watching. Import Private Key/Keystore to sign transactions/messages
      /// 
      /// Locales: en, zh-Hans
      static func inCoordinatorErrorOnlyWatchAccount(_: Void = ()) -> String {
        return NSLocalizedString("InCoordinatorError.onlyWatchAccount", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This will clear cache, cookies, and other browsing data.
      /// 
      /// Locales: en, zh-Hans
      static func settingsBrowserClearCacheAlertMessage(_: Void = ()) -> String {
        return NSLocalizedString("settings.browser.clearCache.alert.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To
      /// 
      /// Locales: en, zh-Hans
      static func confirmPaymentToLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirmPayment.to.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: To
      /// 
      /// Locales: en, zh-Hans
      static func transactionToLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.to.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Today
      /// 
      /// Locales: en, zh-Hans
      static func today(_: Void = ()) -> String {
        return NSLocalizedString("Today", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tokens
      /// 
      /// Locales: en, zh-Hans
      static func tokens(_: Void = ()) -> String {
        return NSLocalizedString("Tokens", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tokens
      /// 
      /// Locales: en, zh-Hans
      static func tokensNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("tokens.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tokens
      /// 
      /// Locales: en, zh-Hans
      static func tokensTabbarItemTitle(_: Void = ()) -> String {
        return NSLocalizedString("tokens.tabbar.item.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tokens will appear automagically. Tap + to add manually.
      /// 
      /// Locales: en, zh-Hans
      static func tokensFooterLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("tokens.footer.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Total network fee
      /// 
      /// Locales: en, zh-Hans
      static func configureTransactionTotalNetworkFeeLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("configureTransaction.totalNetworkFee.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction #
      /// 
      /// Locales: en, zh-Hans
      static func transactionIdLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.id.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction Data (Optional)
      /// 
      /// Locales: en, zh-Hans
      static func configureTransactionDataLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("configureTransaction.data.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction Sent!
      /// 
      /// Locales: en, zh-Hans
      static func sentTransactionTitle(_: Void = ()) -> String {
        return NSLocalizedString("sent.transaction.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transaction time
      /// 
      /// Locales: en, zh-Hans
      static func transactionTimeLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.time.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transactions
      /// 
      /// Locales: en, zh-Hans
      static func transactionsTabbarItemTitle(_: Void = ()) -> String {
        return NSLocalizedString("transactions.tabbar.item.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Transfer %@
      /// 
      /// Locales: en, zh-Hans
      static func transactionCellTokenTransferTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("transaction.cell.tokenTransfer.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Trust Feedback
      /// 
      /// Locales: en, zh-Hans
      static func settingsFeedbackEmailTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.feedback.email.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Try after 1 minute.
      /// 
      /// Locales: en, zh-Hans
      static func lockEnterPasscodeViewModelTryAfterOneMinute(_: Void = ()) -> String {
        return NSLocalizedString("lock.enter.passcode.view.model.try.after.one.minute", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Typically 12 (sometimes 24) words separated by single spaces
      /// 
      /// Locales: en, zh-Hans
      static func importMnemonicFooter(_: Void = ()) -> String {
        return NSLocalizedString("import.mnemonic.footer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Typically 64 alphanumeric characters
      /// 
      /// Locales: en, zh-Hans
      static func importPrivateKeyFooter(_: Void = ()) -> String {
        return NSLocalizedString("import.privateKey.footer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ultra Reliable
      /// 
      /// Locales: en, zh-Hans
      static func welcomeUltraReliableLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("welcome.ultraReliable.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Unknown
      /// 
      /// Locales: en, zh-Hans
      static func transactionCellUnknownTitle(_: Void = ()) -> String {
        return NSLocalizedString("transaction.cell.unknown.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Verify Backup Phrase
      /// 
      /// Locales: en, zh-Hans
      static func verifyBackupPhrase(_: Void = ()) -> String {
        return NSLocalizedString("VerifyBackupPhrase", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Version
      /// 
      /// Locales: en, zh-Hans
      static func settingsVersionLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.version.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wait for the transaction to be mined on the network to see details.
      /// 
      /// Locales: en, zh-Hans
      static func sentTransactionMessage(_: Void = ()) -> String {
        return NSLocalizedString("sent.transaction.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static func wallet(_: Void = ()) -> String {
        return NSLocalizedString("Wallet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet
      /// 
      /// Locales: en, zh-Hans
      static func walletNavigationTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallet.navigation.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet Created
      /// 
      /// Locales: en, zh-Hans
      static func walletCreated(_: Void = ()) -> String {
        return NSLocalizedString("WalletCreated", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallet Imported
      /// 
      /// Locales: en, zh-Hans
      static func walletImported(_: Void = ()) -> String {
        return NSLocalizedString("WalletImported", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wallets
      /// 
      /// Locales: en, zh-Hans
      static func wallets(_: Void = ()) -> String {
        return NSLocalizedString("Wallets", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Warning
      /// 
      /// Locales: en, zh-Hans
      static func settingsNetworkTestWarnningTitle(_: Void = ()) -> String {
        return NSLocalizedString("settings.network.test.warnning.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Watch
      /// 
      /// Locales: en, zh-Hans
      static func watch(_: Void = ()) -> String {
        return NSLocalizedString("Watch", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Well done! %@
      /// 
      /// Locales: en, zh-Hans
      static func verifyPassphraseWelldoneTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("verify.passphrase.welldone.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: With a higher gas price, your transaction fee will be more expensive, but the %@ network will process your transaction faster.
      /// 
      /// Locales: en, zh-Hans
      static func configureTransactionGasPriceLabelDescription(_ value1: String) -> String {
        return String(format: NSLocalizedString("configureTransaction.gasPrice.label.description", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Words separated by a space. (Usually contains 12 words)
      /// 
      /// Locales: en, zh-Hans
      static func importWalletMnemonicPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("import.wallet.mnemonic.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Wrong Input
      /// 
      /// Locales: en, zh-Hans
      static func sendErrorWrongInput(_: Void = ()) -> String {
        return NSLocalizedString("send.error.wrongInput", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Yesterday
      /// 
      /// Locales: en, zh-Hans
      static func yesterday(_: Void = ()) -> String {
        return NSLocalizedString("Yesterday", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You are switching to a test network where transactions are for testing purpose only
      /// 
      /// Locales: en, zh-Hans
      static func settingsNetworkTestWarnningMessage(_: Void = ()) -> String {
        return NSLocalizedString("settings.network.test.warnning.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You can “watch” any public address without divulging your private key. This let’s you view balances and transactions, but not send transactions.
      /// 
      /// Locales: en, zh-Hans
      static func importWatchFooter(_: Void = ()) -> String {
        return NSLocalizedString("import.watch.footer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You haven't received any tokens yet!
      /// 
      /// Locales: en, zh-Hans
      static func emptyViewNoTokensLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("emptyView.noTokens.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You will be notified for sent and received transactions.
      /// 
      /// Locales: en, zh-Hans
      static func settingsPushNotificationsAllowPushNotificationsFooter(_: Void = ()) -> String {
        return NSLocalizedString("settings.pushNotifications.allowPushNotifications.footer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your wallet is never saved to cloud storage or standard device backups.
      /// 
      /// Locales: en, zh-Hans
      static func exportNeverStoredLabelTitle(_: Void = ()) -> String {
        return NSLocalizedString("export.neverStored.label.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: iCloud/Dropbox/Google Drive
      /// 
      /// Locales: en, zh-Hans
      static func importWalletImportAlertSheetOptionTitle(_: Void = ()) -> String {
        return NSLocalizedString("importWallet.import.alertSheet.option.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: via Changelly
      /// 
      /// Locales: en, zh-Hans
      static func depositBuyButtonChangellyTitle(_: Void = ()) -> String {
        return NSLocalizedString("deposit.buy.button.changelly.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: via Coinbase
      /// 
      /// Locales: en, zh-Hans
      static func depositBuyButtonCoinbaseTitle(_: Void = ()) -> String {
        return NSLocalizedString("deposit.buy.button.coinbase.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: via ShapeShift (Crypto only)
      /// 
      /// Locales: en, zh-Hans
      static func depositBuyButtonShapeShiftTitle(_: Void = ()) -> String {
        return NSLocalizedString("deposit.buy.button.shapeShift.title", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BookmarkViewCell.validate()
      try _WalletViewCell.validate()
    }
    
    struct _BookmarkViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BookmarkViewCell
      
      let bundle = R.hostingBundle
      let identifier = "BookmarkViewCell"
      let name = "BookmarkViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BookmarkViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BookmarkViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "launch_screen_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_screen_logo' is used in nib 'BookmarkViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CoinViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CoinViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CoinViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CoinViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _EditTokenTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EditTokenTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EditTokenTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditTokenTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NonFungibleCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NonFungibleCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NonFungibleCollectionViewCell"
      let name = "NonFungibleCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NonFungibleCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NonFungibleCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NonFungibleTokenViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NonFungibleTokenViewCell
      
      let bundle = R.hostingBundle
      let identifier = "NonFungibleTokenViewCell"
      let name = "NonFungibleTokenViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NonFungibleTokenViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NonFungibleTokenViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _WalletViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WalletViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> WalletViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WalletViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "glasses", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'glasses' is used in nib 'WalletViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _WordCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WordCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "word"
      let name = "WordCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> WordCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WordCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "launch_screen_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch_screen_logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
